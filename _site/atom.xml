<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>farmosteast</title>
 <link href="http://Octavianus.github.io/" rel="self"/>
 <link href="http://Octavianus.github.io"/>
 <updated>2014-03-31T14:19:34-07:00</updated>
 <id>http://Octavianus.github.io</id>
 <author>
   <name>David</name>
   <email>weng@email.arizona.edu</email>
 </author>

 
 <entry>
   <title>New[] In C++ User Guide</title>
   <link href="http://Octavianus.github.io/technology/2014/03/17/New%5B%5D-in-C%2B%2B-User-Guide"/>
   <updated>2014-03-17T00:00:00-07:00</updated>
   <id>http://Octavianus.github.io/technology/2014/03/17/New[]-in-C++-User-Guide</id>
   <content type="html">&lt;p&gt;编写面向对象的程序，经常需要使用到new和delete操作为对象申请内存空间并且初始化。在我博客的另一篇文章 &lt;a href=&quot;http://octavianus.github.io/technology/2013/12/25/Debug-the-file-system/&quot;&gt;Debug The File System&lt;/a&gt; 我提到内存的分配和回收是开发中最令人头疼的事情，一旦出现内存的重叠分配或者访问越界等问题都是很难察觉到的，到时候出现段错误也需要花费大量的时间检查和排除错误。&lt;/p&gt;

&lt;p&gt;在C编程中，程序员只需要谨慎仔细的使用malloc和free(虽然这样也不容易)，C++在C的基础上，添加了强大的new功能，不仅可以分配内存，同时还可以为对象初始化，因此，更多的灵活性带来了更多的使用技巧。以我最近做的DBMS term project为例，对于对象内存的分配和回收这一部分而言，使用最频繁的要算是 &lt;strong&gt;Buffer Manager&lt;/strong&gt; (以下简称&lt;code&gt;BM&lt;/code&gt;)这一层了，这一层主要的功能是在heap file层申请Insert, Update，delete等等各种操作请求时，由于每一项操作对应一个或多个虚拟的Page(Page是数据库的存储单位之一)，BM会根据这些操作对应的Page，把其从外部存储设备(disk, flash)中读取到内存池(buffer pool)中，或者从内存池写到外部存储设备上。所以这其中涉及到了大量的内存分配和释放，看似new和delelte能为我们处理一切，可是不同的使用模式效率也会不同。首先有必要了解new的基本使用方法，我认为核心内容是关于placement new.内容转自百度sytarchen的空间和博客园的wanghetao.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;_new&quot;&gt;一. New的用法&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1. new( )&lt;/strong&gt; 分配这种类型的一个大小的内存空间,并以括号中的值来初始化这个变量;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. new[]&lt;/strong&gt; 分配这种类型的n个大小的内存空间,并用默认构造函数来初始化这些变量;&lt;/p&gt;

&lt;p&gt;例子：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c'&gt;&lt;span class='cp'&gt;#include&amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class='cp'&gt;#include&amp;lt;cstring&amp;gt;&lt;/span&gt;
&lt;span class='n'&gt;using&lt;/span&gt; &lt;span class='n'&gt;namespace&lt;/span&gt; &lt;span class='n'&gt;std&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='nf'&gt;main&lt;/span&gt;&lt;span class='p'&gt;(){&lt;/span&gt;   
    &lt;span class='kt'&gt;char&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='n'&gt;new&lt;/span&gt; &lt;span class='kt'&gt;char&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
    &lt;span class='c1'&gt;//error分配一个char(1字节)的空间,                                  &lt;/span&gt;
    &lt;span class='c1'&gt;//用&amp;quot;Hello&amp;quot;来初始化,这明显不对  &lt;/span&gt;
     
    &lt;span class='kt'&gt;char&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='n'&gt;new&lt;/span&gt; &lt;span class='kt'&gt;char&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;6&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;   
    &lt;span class='c1'&gt;//p=&amp;quot;Hello&amp;quot;;                &lt;/span&gt;
    &lt;span class='c1'&gt;//不能将字符串直接赋值给该字符指针p，原因是：                                &lt;/span&gt;
    &lt;span class='c1'&gt;//指针p指向的是字符串的第一个字符，只能用下面的                                &lt;/span&gt;
    &lt;span class='c1'&gt;//strcpy   &lt;/span&gt;
    &lt;span class='n'&gt;strcpy&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;   
    &lt;span class='n'&gt;cout&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&amp;lt;*&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;endl&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;              &lt;span class='c1'&gt;//只是输出p指向的字符串的第一个字符！   &lt;/span&gt;
    &lt;span class='n'&gt;cout&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;endl&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;               &lt;span class='c1'&gt;//输出p指向的字符串！   &lt;/span&gt;
    &lt;span class='n'&gt;delete&lt;/span&gt;&lt;span class='p'&gt;[]&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;  
     &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;3．开辟单变量地址空间&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1)new int;  //开辟一个存放数组的存储空间,返回一个指向该存储空间的地址.int *a = new int 即为将一个int类型的地址赋值给整型指针a. 

2)int \*a = new int(5) 作用同上,但是同时将整数赋值为5&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;4．开辟数组空间&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;一维: int \*a = new int[100];开辟一个大小为100的整型数组空间

二维: int \*\*a = new int[5][6]

三维及其以上:依此类推.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一般用法: new 类型 [初值]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;当使用new运算符定义一个多维数组变量或数组对象时，它产生一个指向数组第一个元素的指针，返回的类型保持了除最左边维数外的所有维数。&lt;/p&gt;

&lt;p&gt;例如：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c'&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;p1&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;new&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;10&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;返回的是一个指向int的指针int*&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c'&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;p2&lt;/span&gt;&lt;span class='p'&gt;)[&lt;/span&gt;&lt;span class='mi'&gt;10&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;new&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='mi'&gt;10&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;new了一个二维数组,去掉最左边那一维[2],剩下int[10],所以返回的是一个指向int[10]这种一维数组的指针int (*)[10].&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c'&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;p3&lt;/span&gt;&lt;span class='p'&gt;)[&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='mi'&gt;10&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;new&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;5&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='mi'&gt;10&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;new了一个三维数组,去掉最左边那一维[5],还有int[2][10],所以返回的是一个指向二维数组int[2][10]这种类型的指针int (*)[2][10].&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;例子：&lt;/strong&gt;&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c'&gt;&lt;span class='cp'&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class='cp'&gt;#include &amp;lt;typeinfo&amp;gt;&lt;/span&gt;
&lt;span class='n'&gt;using&lt;/span&gt; &lt;span class='n'&gt;namespace&lt;/span&gt; &lt;span class='n'&gt;std&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='nf'&gt;main&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;new&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;34&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
    &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;b&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;new&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt;&lt;span class='p'&gt;[];&lt;/span&gt;
    &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;)[&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;new&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;34&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
    &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;d&lt;/span&gt;&lt;span class='p'&gt;)[&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;new&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt;&lt;span class='p'&gt;[][&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
    &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;e&lt;/span&gt;&lt;span class='p'&gt;)[&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;new&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;34&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
    &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;f&lt;/span&gt;&lt;span class='p'&gt;)[&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;new&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt;&lt;span class='p'&gt;[][&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
    &lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c1'&gt;//运行时错误,无分配的内存,b只起指针的作用,用来指向相应的数据&lt;/span&gt;
    &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='n'&gt;d&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;  &lt;span class='c1'&gt;//运行时错误,无分配的内存,d只起指针的作用,用来指向相应的数据&lt;/span&gt;
    &lt;span class='n'&gt;e&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='n'&gt;f&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;   &lt;span class='c1'&gt;//运行时错误,无分配的内存,f只起指针的作用,用来指向相应的数据&lt;/span&gt;
    &lt;span class='n'&gt;cout&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;typeid&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;&lt;span class='n'&gt;name&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;endl&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='n'&gt;cout&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;typeid&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;&lt;span class='n'&gt;name&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;endl&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='n'&gt;cout&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;typeid&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;&lt;span class='n'&gt;name&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;endl&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='n'&gt;cout&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;typeid&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;d&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;&lt;span class='n'&gt;name&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;endl&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='n'&gt;cout&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;typeid&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;e&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;&lt;span class='n'&gt;name&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;endl&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='n'&gt;cout&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;typeid&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;f&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;&lt;span class='n'&gt;name&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;endl&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='n'&gt;delete&lt;/span&gt;&lt;span class='p'&gt;[]&lt;/span&gt; &lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;delete&lt;/span&gt;&lt;span class='p'&gt;[]&lt;/span&gt; &lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;delete&lt;/span&gt;&lt;span class='p'&gt;[]&lt;/span&gt; &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='n'&gt;delete&lt;/span&gt;&lt;span class='p'&gt;[]&lt;/span&gt; &lt;span class='n'&gt;d&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;delete&lt;/span&gt;&lt;span class='p'&gt;[]&lt;/span&gt; &lt;span class='n'&gt;e&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;delete&lt;/span&gt;&lt;span class='p'&gt;[]&lt;/span&gt; &lt;span class='n'&gt;f&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c'&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;
&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;
&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='p'&gt;)[&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='p'&gt;)[&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='p'&gt;)[&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='p'&gt;)[&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;6．new运算符&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;最常用的是作为运算符的new，比如：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c'&gt;&lt;span class='n'&gt;string&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;str&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;new&lt;/span&gt; &lt;span class='n'&gt;string&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;test new&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;作为运算符，&lt;code&gt;new和sizeof一样，是C++内置的，你不能对它做任何的改变，除了使用它。&lt;/code&gt; new会在堆上分配一块内存，并会自动调用类的构造函数。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7．new函数&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;第二种就是new函数，其实new运算符内部分配内存使用的就是new函数，原型是：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c'&gt;&lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;operator&lt;/span&gt; &lt;span class='nf'&gt;new&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;size_t&lt;/span&gt; &lt;span class='n'&gt;size&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;new函数返回的是一个void指针，一块未经初始化的内存。如你所见，这和C语言的malloc行为相似，你可以重载new函数，并且增加额外的参数，但是必须保证第一个参数必须是size_t类型，它指明了分配内存块的大小，C++允许你这么做，当然一般情况下这是不必要的。如果重载了new函数，在使用new操作符时调用的就是你重载后的new函数了。 如果使用new函数，和语句&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c'&gt;&lt;span class='n'&gt;string&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;str&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;new&lt;/span&gt; &lt;span class='n'&gt;string&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;test new&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;相对的代码大概是如下的样子：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c'&gt;&lt;span class='n'&gt;string&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;str&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;string&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='n'&gt;operator&lt;/span&gt; &lt;span class='n'&gt;new&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;sizeof&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;string&lt;/span&gt;&lt;span class='p'&gt;));&lt;/span&gt;  
&lt;span class='n'&gt;str&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;string&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;test new&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;   
&lt;span class='c1'&gt;// 当然这个调用时非法的，但是编译器是没有这个限制的&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;8placement_new&quot;&gt;8.placement new&lt;/h3&gt;

&lt;h4 id=&quot;1_placement_new&quot;&gt;1. placement new的含义&lt;/h4&gt;

&lt;p&gt;placement new 是重载operator new 的一个标准、全局的版本，它不能够被自定义的版本代替（不像普通版本的operator new 和 operator delete能够被替换）。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c'&gt; 
&lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;operator&lt;/span&gt; &lt;span class='nf'&gt;new&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='kt'&gt;size_t&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;throw&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;     &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;placement new的执行忽略了size_t参数，只返还第二个参数。其结果是允许用户把一个对象放到一个特定的地方，达到调用构造函数的效果。&lt;/p&gt;

&lt;p&gt;和其他普通的new不同的是，它在括号里多了另外一个参数。比如：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c'&gt;&lt;span class='n'&gt;Widget&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;new&lt;/span&gt; &lt;span class='n'&gt;Widget&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='c1'&gt;//ordinary new &lt;/span&gt;
&lt;span class='n'&gt;pi&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;new&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;ptr&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;pi&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;new&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;ptr&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;     &lt;span class='c1'&gt;//placement new&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;括号里的参数ptr是一个指针，它指向一个内存缓冲器，placement new将在这个缓冲器上分配一个对象。Placement new的返回值是这个被构造对象的地址(比如括号中的传递参数)。placement new主要适用于：在对时间要求非常高的应用程序中，因为这些程序分配的时间是确定的；长时间运行而不被打断的程序；以及执行一个垃圾收集器 (garbage collector)。&lt;/p&gt;

&lt;h4 id=&quot;2_new_operator_new__placement_new_&quot;&gt;2. new 、operator new 和 placement new 区别&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;new&lt;/strong&gt;：不能被重载，其行为总是一致的。它先调用operator new分配内存，然后调用构造函数初始化那段内存。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;operator new&lt;/strong&gt;：要实现不同的内存分配行为，应该重载operator new，而不是new。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;delete和operator delete类似。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;delete首先调用对象的析构函数，然后调用operator delete释放掉所使用的内存。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;placement new&lt;/strong&gt;：只是operator new重载的一个版本。它并不分配内存，只是返回指向已经分配好的某段内存的一个指针。因此不能删除它，但需要调用对象的析构函数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;3_new_&quot;&gt;3. new 操作符的执行过程&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;　　(1). 调用operator new分配内存 ；
　　(2). 调用构造函数生成类对象；
　　(3). 返回相应指针。&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;operator new 就像operator+一样，是可以重载的。如果类中没有重载operator new，那么调用的就是全局的::operator new来完成堆的分配。同理，operator new[]、operator delete、operator delete[]也是可以重载的，其实 operator new也是operator new的一个重载的版本，只是很少用而已。如果你想在已经分配的内存中创建一个对象，使用new时行不通 的。也就是说placement new允许你在一个已经分配好的内存中（栈或者堆中）构造一个新的对象。原型中void*p实际上就是指向一个已经分配 好的内存缓冲区的的首地址。&lt;/p&gt;

&lt;h4 id=&quot;4_placement_new_&quot;&gt;4. Placement new 存在的理由&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用Placement new 解决buffer的问题&lt;/strong&gt; 问题描述：用new分配的数组缓冲时，由于调用了默认构造函数，因此执行效率上不佳。若没有默认构造函数则会发生编译时错误。如果你想在预分配的内存上创建对象，用缺省的new操作符是行不通的。要解决这个问题，你可以用placement new构造。它允许你构造一个新对象到预分配的内存上。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;增大时空效率的问题&lt;/strong&gt; 使用new操作符分配内存需要在堆中查找足够大的剩余空间，显然这个操作速度是很慢的，而且有可能出现无法分配内存的异常（空间不够）。 placement new 就可以解决这个问题。我们构造对象都是在一个预先准备好了的内存缓冲区中进行，不需要查找内存，内存分配的时间是常数；而且不会出现在程序运行中途出现内存不足的异常。所以，placement new非常适合那些对时间要求比较高，长时间运行不希望被打断的应用程序。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;5_&quot;&gt;5. 使用步骤&lt;/h4&gt;

&lt;p&gt;在很多情况下，placement new的使用方法和其他普通的new有所不同。这里提供了它的使用步骤。&lt;/p&gt;

&lt;h6 id=&quot;_&quot;&gt;第一步 缓存提前分配&lt;/h6&gt;

&lt;p&gt;有三种方式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1.为了保证通过placement new使用的缓存区的memory alignmen(内存队列)正确准备，使用普通的new来分配它：在堆上进行分配

class Task ;

char \* buff = new [sizeof(Task)]; //分配内存

(请注意auto或者static内存并非都正确地为每一个对象类型排列，所以，你将不能以placement new使用它们。)

2.在栈上进行分配

class Task ;
char buf[N\*sizeof(Task)]; //分配内存

3.还有一种方式，就是直接通过地址来使用。(必须是有意义的地址)

void* buf = reinterpret_cast&amp;lt;void*&amp;gt; (0xF00F);&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&quot;&quot;&gt;第二步：对象的分配&lt;/h6&gt;

&lt;p&gt;在刚才已分配的缓存区调用placement new来构造一个对象。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Task *ptask = new (buf) Task&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&quot;_2&quot;&gt;第三步：使用&lt;/h6&gt;

&lt;p&gt;按照普通方式使用分配的对象：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ptask-&amp;gt;memberfunction();

ptask-&amp;gt; member; //...&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&quot;_3&quot;&gt;第四步：对象的析构&lt;/h6&gt;

&lt;p&gt;一旦你使用完这个对象，你必须调用它的析构函数来毁灭它。按照下面的方式调用析构函数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ptask-&amp;gt;~Task(); //调用外在的析构函数&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&quot;_4&quot;&gt;第五步：释放&lt;/h6&gt;

&lt;p&gt;你可以反复利用缓存并给它分配一个新的对象（重复步骤2，3，4）如果你不打算再次使用这个缓存，你可以象这样释放它：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;delete [] buf;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;跳过任何步骤就可能导致运行时间的崩溃，内存泄露，以及其它的意想不到的情况。如果你确实需要使用placement new，请认真遵循以上的步骤。&lt;/p&gt;

&lt;h4 id=&quot;6_example_operator_new&quot;&gt;6. Example &lt;a href=&quot;http://www.cplusplus.com/reference/new/operator%20new[]/&quot;&gt;operator new[]&lt;/a&gt;&lt;/h4&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c'&gt;&lt;span class='c1'&gt;// operator new[] example&lt;/span&gt;
&lt;span class='cp'&gt;#include &amp;lt;iostream&amp;gt;     &lt;/span&gt;&lt;span class='c1'&gt;// std::cout&lt;/span&gt;
&lt;span class='cp'&gt;#include &amp;lt;new&amp;gt;          &lt;/span&gt;&lt;span class='c1'&gt;// ::operator new[]&lt;/span&gt;

&lt;span class='k'&gt;struct&lt;/span&gt; &lt;span class='n'&gt;MyClass&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;data&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='n'&gt;MyClass&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='n'&gt;std&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='n'&gt;cout&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class='sc'&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;}&lt;/span&gt;  &lt;span class='c1'&gt;// print an asterisk for each construction&lt;/span&gt;
&lt;span class='p'&gt;};&lt;/span&gt;

&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='nf'&gt;main&lt;/span&gt; &lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='n'&gt;std&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='n'&gt;cout&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;constructions (1): &amp;quot;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='c1'&gt;// allocates and constructs five objects:&lt;/span&gt;
  &lt;span class='n'&gt;MyClass&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='n'&gt;p1&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;new&lt;/span&gt; &lt;span class='n'&gt;MyClass&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;5&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
  &lt;span class='n'&gt;std&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='n'&gt;cout&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class='sc'&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;

  &lt;span class='n'&gt;std&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='n'&gt;cout&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;constructions (2): &amp;quot;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='c1'&gt;// allocates and constructs five objects (nothrow):&lt;/span&gt;
  &lt;span class='n'&gt;MyClass&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='n'&gt;p2&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;new&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;std&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='n'&gt;nothrow&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;MyClass&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;5&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
  &lt;span class='n'&gt;std&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='n'&gt;cout&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class='sc'&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;

  &lt;span class='n'&gt;std&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='n'&gt;cout&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;constructions (3): &amp;quot;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='c1'&gt;// allocates storage for five objects, but does not construct them:&lt;/span&gt;
  &lt;span class='n'&gt;MyClass&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='n'&gt;p3&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;static_cast&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;MyClass&lt;/span&gt;&lt;span class='o'&gt;*&amp;gt;&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='n'&gt;operator&lt;/span&gt; &lt;span class='n'&gt;new&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;sizeof&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;MyClass&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;5&lt;/span&gt;&lt;span class='p'&gt;])));&lt;/span&gt;
  &lt;span class='n'&gt;std&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='n'&gt;cout&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class='sc'&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;

  &lt;span class='n'&gt;std&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='n'&gt;cout&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;constructions (4): &amp;quot;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='c1'&gt;// constructs five objects at p3, but does not allocate:&lt;/span&gt;
  &lt;span class='n'&gt;new&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;p3&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;MyClass&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;5&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
  &lt;span class='n'&gt;std&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='n'&gt;cout&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class='sc'&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;

  &lt;span class='n'&gt;delete&lt;/span&gt;&lt;span class='p'&gt;[]&lt;/span&gt; &lt;span class='n'&gt;p3&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='n'&gt;delete&lt;/span&gt;&lt;span class='p'&gt;[]&lt;/span&gt; &lt;span class='n'&gt;p2&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='n'&gt;delete&lt;/span&gt;&lt;span class='p'&gt;[]&lt;/span&gt; &lt;span class='n'&gt;p1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;

  &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;output&quot;&gt;Output:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;constructions (1): *****
constructions (2): *****
constructions (3): 
constructions (4): *****&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;delete&quot;&gt;二．delete用法:&lt;/h3&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='c'&gt; &lt;span class='mf'&gt;1.&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;new&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
         &lt;span class='n'&gt;delete&lt;/span&gt; &lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;   &lt;span class='c1'&gt;//释放单个int的空间&lt;/span&gt;
 &lt;span class='mf'&gt;2.&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;new&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;5&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
        &lt;span class='n'&gt;delete&lt;/span&gt; &lt;span class='p'&gt;[]&lt;/span&gt; &lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c1'&gt;//释放int数组空间&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要访问new所开辟的结构体空间,无法直接通过变量名进行,只能通过赋值的指针进行访问. 用new和delete可以动态开辟,撤销地址空间.在编程序时,若用完一个变量(一般是暂时存储的数组),下次需要再用,但却又想省去重新初始化的功夫,可以在每次开始使用时开辟一个空间,在用完后撤销它.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;_5&quot;&gt;总结&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;函数new&lt;/p&gt;

&lt;p&gt;void *operator new(size_t size); 在堆上分配一块内存，和placement new（void *operator new(size_t, void* buffer)）; 在一块已经存在的内存上创建对象，如果你已经有一块内存，placement new会非常有用，事实上，它STL中有着广泛的使用。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;运算符new 最常用的new，没什么可说的。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;函数new不会自动调用类的构造函数，因为它对分配的内存类型一无所知；而运算符new会自动调用类的构造函数。&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;函数new允许重载，而运算符new不能被重载。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content>
 </entry>
 
 <entry>
   <title>写给自己的2014展望</title>
   <link href="http://Octavianus.github.io/thought/2014/01/13/%E5%86%99%E7%BB%99%E8%87%AA%E5%B7%B1%E7%9A%842014%E5%B1%95%E6%9C%9B"/>
   <updated>2014-01-13T00:00:00-08:00</updated>
   <id>http://Octavianus.github.io/thought/2014/01/13/写给自己的2014展望</id>
   <content type="html">&lt;p&gt;2014年已经来了，你一无所有地将自己袒露在巨大的未知面前。别再同自己谈论告别，你要的不是告别，你明白有些事情无法回头，你需要的是建设全新生活的勇气。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;1.重新拾起web开发的技术和编程语言。&lt;/strong&gt;因为种种复杂的原因，第一学期的GPA成绩不佳，这样的处境让我四处需找突破口，经过一番努力，我似乎领会了些什么：GPA不如好手艺，好好提升实战能力比较来的稳妥。第一学期掌握了最基础的系统开发，在linux下用c编写文件系统。 下一步我打算接触web开发，如果条件成熟，再去尝试转移到移动平台。在这方面我并不是一个新手，在大一大二的时候，探索阶段的我接触过的能和web开发沾上边的从dreamweaver开始，然后再到HTML+CSS+photoshop切图的时代， 再到PHP, javascript, ASP.Net. 但是这些只是做到了HELLO WORLD的程度，最后真正动手开发的是一个javascript的网页小游戏，过段时间我打算布置在我的博客里。 第二个project是以jsp + tomcat + MySQL为基本配置的BBS论坛系统（也尝试布置在博客里）。按照规律，接下来应该掌握的是DOM, JSON, AJAX, JQuery, &lt;a href=&quot;http://prototypejs.org/&quot;&gt;prototypejs&lt;/a&gt;. 当然需要继续巩固之前的基础，毕竟都有好些年没有 在运用过了。不过这次，不能是在蜻蜓点水，你要持续和深入的学习。这方面我有一个人可以请教，就是我校在校PHD，RA &lt;a href=&quot;http://yoursunny.cn/m/&quot;&gt;石君霄&lt;/a&gt;，此人从2000年就开始开始web开发&lt;a href=&quot;http://yoursunny.com/t/2009/my-webdev-timeline/&quot;&gt;(他的网站开发经历)&lt;/a&gt;，技术从最基本的HTML + FrontPage已经鸟枪换炮好几代了。 我积攒了许多的问题打算下学期我们都选了的一门课上问他，比如如何能够在自己的网站投放广告，网页服务如何和SMS通信，他认为最好的开发框架和技术什么，需不需要做好分层设计等等。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.精通一门OOP。&lt;/strong&gt;当然java这种OOP的王者（指的使用人数的角度）可以考虑修一门本科的课，时间大概在研二上学期找full-time job之前。 课程名 &lt;a href=&quot;http://www.cs.arizona.edu/classes/cs335/spring11/&quot;&gt;Object-Oriented Programming and Design&lt;/a&gt; 但是同时我也在犹豫C++，比较我层级啃下了OO的精髓就是考C++入门经典最艰难的那几章，继承，多态，泛型等等。 基础是有的，感情也是有的，听过一句比较野蛮的分类，如果你是一个狂热的编程爱好者就选择C++，如果你只为了找到一份工作就用Java。 这样的话我估计不属于前者。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.找到暑期实习。&lt;/strong&gt;如果想找到实习，除了刷题，足够多的network和内推占主要因素，否则简历都会淹没在茫茫纸海中。就这一点上来自印度人的咖喱们就太厉害了， 有时候觉得他们是在用生命network：一次在系里的party上和几个印度朋友聊的好好地，其中一个眼睛里有活儿的，他看见几个PhD走来，他立刻抛弃了我们，去吧台买了一杯酒从容的走到那一群PhD当中谈笑风生。 我当时就感到很惊讶，这个小伙伴是怎么做到的呢？脸皮厚，network控，能吹。 无数的故事和都告诉这我这样一个道理。&lt;a href=&quot;http://www.1point3acres.com/bbs/forum.php?mod=viewthread&amp;tid=5853&amp;extra=&amp;highlight=%CA%EE%C6%DA%CA%B5%CF%B0&amp;page=1&quot;&gt;比如地里的一个小故事&lt;/a&gt;。另外，我注册了学校的career service服务，每年只需要5刀服务费，开学了找他们帮忙修简历，看看Network Service能不能提供内推，因为Network Service 是一个校友组织，里面都是过来注册表示愿意帮助校友的人。所以这绝对是一个很好的Networking资源。 最后在豆瓣友邻的帮助下，有人给我提供了一个提前批的内推到腾讯做广告数据挖掘工程师的机会，虽然不一定能成，但是起码让我了解到即使没找到实习，国内的实习岗位也未尝不是一个可选的退路。 为了Networking我也豁出去了，下学期厚脸皮参加我系的ACM社团，参与和那些本科生（事实是这些本科生其实都比我牛 OJL）的讨论和活动，甚至编程竞赛。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.定下我的科普微博Scientific American的发展计划。&lt;/strong&gt;以粉丝数为自我考核目标，争取学期结束突破1W，目前6700+。 大致的实现手法是，找到相关话题，请求大V朋友帮忙，比如姬十三和环球科学杂志社（我们之间都是互相关注了的）。实在不行让谷大白话来帮忙吧。 他现在可是大红大紫的人物了，刚认识的时候都才几千粉的。 再就是定点投放，在科普或者英语学习相关的论坛或者讨论组手动投放广告。由于专业性比较强，不容易模仿谷大白话的插科打诨的发展模式。 我参考过知乎话题，&lt;a href=&quot;http://www.zhihu.com/question/21435769/answer/18221344&quot;&gt;请问专业性质很强的微博如何运营好？&lt;/a&gt;之后，决定借鉴游戏邦的推广模式，我关注这个微博很久了，一直佩服他们能够持续发布高质量微博内容。我也可以尝试引入和知乎类的问答网站类似的Quora话题，和粉丝互动。 最无耻的方法就是放弃高洋上的全英文特性，开始发布中文内容”开拓屌丝市场”。我还可以转发并且点评时效性比较强的当下热点话题。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.理解外汇，熟悉虚拟交易。&lt;/strong&gt;设计一个移动应用或者网络应用的模型，你要在暑假的时候去实施它。我的金融素养和金融基础还是很不错的，看过一些书，也关注金融话题，文章和节目。 所以理解CMSFOREX上的外汇入门速度应该很快，对于仓位，做空，杠杆这些名词是已经掌握了的，但是我还要对这些名词的英文有铭感度，毕竟这些东西都是别人发明的。 其次，用好IronFX交易系统，这是著名的民间金融爱好者&lt;a href=&quot;http://www.douban.com/people/softpur/&quot;&gt;Ms.蔬芙&lt;/a&gt;推荐给我并且亲自出马帮我注册的账号，我必须要感谢她，我理应要在这个学期里好好地经营好这个账号，争取不要爆仓。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6.一次一个人的旅行。&lt;/strong&gt;这并不是什么浪漫的事，更不是听着陈绮贞的旅行的意义漫步在一个完全陌生的地方的情怀，如果硬是要说出个什么，旅行的意义似乎就隐藏在跋涉之中。那种身体和心灵的双重疲倦带来了某种充实和安全感，让我能够更清晰地触摸到自己的生命力。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7.参加冥想辅导班，养成冥想的习惯。&lt;/strong&gt;Have a habit of disengagement.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;好了，这些事儿就够你忙的了。记住你说过的话，多听音乐，多看书，多运动，少刷屏，少伤感。别总犯同样的错误。当在某个寂静的夜里，你一个人的时候，翻翻你的手机和浏览器收藏夹，删掉用不到的号码，我知道你还能背诵，总有一天你会忘掉的。把告别了的版面从收藏夹里删除吧，如果一定要去，记得你是过客。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Preparing For The Interview</title>
   <link href="http://Octavianus.github.io/technology/2013/12/29/Preparing-For-The-Interview"/>
   <updated>2013-12-29T00:00:00-08:00</updated>
   <id>http://Octavianus.github.io/technology/2013/12/29/Preparing-For-The-Interview</id>
   <content type="html">&lt;h1 id=&quot;cracking_the_coding_interview&quot;&gt;Cracking the Coding Interview:&lt;/h1&gt;

&lt;p&gt;CC使用方法，每道题思考30分钟左右如果没有头绪就看答案，推敲，然后在纸上和电脑里实现。每次两道题。每天2-3次（放假时）。 平时周末一次即可。&lt;/p&gt;

&lt;h1 id=&quot;leetcode&quot;&gt;leetcode:&lt;/h1&gt;

&lt;p&gt;参考答案：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/iphkwan/leetcode&quot;&gt;https://github.com/iphkwan/leetcode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/fanfank/leetcode&quot;&gt;https://github.com/fanfank/leetcode&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;&quot;&gt;面试题按照难度分类&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;(第一行是题目，难度，频率；第二行是数据结构，算法)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Id Question Difficulty Freqency Data Structures Algorithms&lt;/p&gt;

&lt;p&gt;1 Two Sum 2 5 array set sort two pointers&lt;/p&gt;

&lt;p&gt;2 Add Two Numbers 3 4 linked list two pointers math&lt;/p&gt;

&lt;p&gt;3 Longest Substring Without Repeating Characters 3 2 string hashtable two pointers&lt;/p&gt;

&lt;p&gt;4 Median of Two Sorted Arrays 5 3 array binary search&lt;/p&gt;

&lt;p&gt;5 Longest Palindromic Substring 4 2 string&lt;/p&gt;

&lt;p&gt;6 ZigZag Conversion 3 1 string&lt;/p&gt;

&lt;p&gt;7 Reverse Integer 2 3 math&lt;/p&gt;

&lt;p&gt;8 String to Integer (atoi) 2 5 string math&lt;/p&gt;

&lt;p&gt;9 Palindrome Number 2 2 math 10 Regular Expression Matching 5 3 string recursion dp&lt;/p&gt;

&lt;p&gt;11 Container With Most Water 3 2 array two pointers&lt;/p&gt;

&lt;p&gt;12 Integer to Roman 3 4 math&lt;/p&gt;

&lt;p&gt;13 Roman to Integer 2 4 math&lt;/p&gt;

&lt;p&gt;14 Longest Common Prefix 2 1 string&lt;/p&gt;

&lt;p&gt;15 3Sum 3 5 array two pointers&lt;/p&gt;

&lt;p&gt;16 3Sum Closest 3 1 array two pointers&lt;/p&gt;

&lt;p&gt;17 Letter Combinations of a Phone Number 3 3 string dfs&lt;/p&gt;

&lt;p&gt;18 4Sum 3 2 array&lt;/p&gt;

&lt;p&gt;19 Remove Nth Node From End of List 2 3 linked list two pointers&lt;/p&gt;

&lt;p&gt;20 Valid Parentheses 2 5 string stack&lt;/p&gt;

&lt;p&gt;21 Merge Two Sorted Lists 2 5 linked list sort two pointers merge&lt;/p&gt;

&lt;p&gt;22 Generate Parentheses 3 4 string dfs&lt;/p&gt;

&lt;p&gt;23 Merge k Sorted Lists 3 4 linked list heap sort two pointers merge&lt;/p&gt;

&lt;p&gt;24 Swap Nodes in Pairs 2 4 linked list&lt;/p&gt;

&lt;p&gt;25 Reverse Nodes in k-Group 4 2 linked list recursion two pointers&lt;/p&gt;

&lt;p&gt;26 Remove Duplicates from Sorted Array 1 3 array two pointers&lt;/p&gt;

&lt;p&gt;27 Remove Element 1 4 array two pointers&lt;/p&gt;

&lt;p&gt;28 Implement strStr() 4 5 string two pointers KMP rolling hash&lt;/p&gt;

&lt;p&gt;29 Divide Two Integers 4 3 binary search math&lt;/p&gt;

&lt;p&gt;30 Substring with Concatenation of All Words 3 1 string two pointers&lt;/p&gt;

&lt;p&gt;31 Next Permutation 5 2 array permutation&lt;/p&gt;

&lt;p&gt;32 Longest Valid Parentheses 4 1 string dp&lt;/p&gt;

&lt;p&gt;33 Search in Rotated Sorted Array 4 3 array binary search&lt;/p&gt;

&lt;p&gt;34 Search for a Range 4 3 array binary search&lt;/p&gt;

&lt;p&gt;35 Search Insert Position 2 2 array&lt;/p&gt;

&lt;p&gt;36 Valid Sudoku 2 2 array&lt;/p&gt;

&lt;p&gt;37 Sudoku Solver 4 2 array dfs&lt;/p&gt;

&lt;p&gt;38 Count and Say 2 2 string two pointers&lt;/p&gt;

&lt;p&gt;39 Combination Sum 3 3 array combination&lt;/p&gt;

&lt;p&gt;40 Combination Sum II 4 2 array combination&lt;/p&gt;

&lt;p&gt;41 First Missing Positive 5 2 array sort&lt;/p&gt;

&lt;p&gt;42 Trapping Rain Water 4 2 array two pointers stack&lt;/p&gt;

&lt;p&gt;43 Multiply Strings 4 3 string two pointers math&lt;/p&gt;

&lt;p&gt;44 Wildcard Matching 5 3 string recursion dp greedy&lt;/p&gt;

&lt;p&gt;45 Jump Game II 4 2 array&lt;/p&gt;

&lt;p&gt;46 Permutations 3 4 array permutation&lt;/p&gt;

&lt;p&gt;47 Permutations II 4 2 array permutation&lt;/p&gt;

&lt;p&gt;48 Rotate Image 4 2 array&lt;/p&gt;

&lt;p&gt;49 Anagrams 3 4 string hashtable&lt;/p&gt;

&lt;p&gt;50 Pow(x, n) 3 5 binary search math&lt;/p&gt;

&lt;p&gt;51 N-Queens 4 3 array dfs&lt;/p&gt;

&lt;p&gt;52 N-Queens II 4 3 array dfs&lt;/p&gt;

&lt;p&gt;53 Maximum Subarray 3 3 array dp&lt;/p&gt;

&lt;p&gt;54 Spiral Matrix 4 2 array&lt;/p&gt;

&lt;p&gt;55 Jump Game 3 2 array&lt;/p&gt;

&lt;p&gt;56 Merge Intervals 4 5 array linked list red-black tree sort merge&lt;/p&gt;

&lt;p&gt;57 Insert Interval 4 5 array linked list red-black tree sort merge&lt;/p&gt;

&lt;p&gt;58 Length of Last Word 1 1 string&lt;/p&gt;

&lt;p&gt;59 Spiral Matrix II 3 2 array&lt;/p&gt;

&lt;p&gt;60 Permutation Sequence 5 1 permutation math&lt;/p&gt;

&lt;p&gt;61 Rotate List 3 2 linked list two pointers&lt;/p&gt;

&lt;p&gt;62 Unique Paths 2 3 array dp&lt;/p&gt;

&lt;p&gt;63 Unique Paths II 3 3 array dp&lt;/p&gt;

&lt;p&gt;64 Minimum Path Sum 3 3 array dp&lt;/p&gt;

&lt;p&gt;65 Valid Number 2 5 string math&lt;/p&gt;

&lt;p&gt;66 Plus One 1 2 array math&lt;/p&gt;

&lt;p&gt;67 Add Binary 2 4 string two pointers math&lt;/p&gt;

&lt;p&gt;68 Text Justification 4 2 string&lt;/p&gt;

&lt;p&gt;69 Sqrt(x) 4 4 binary search&lt;/p&gt;

&lt;p&gt;70 Climbing Stairs 2 5 dp&lt;/p&gt;

&lt;p&gt;71 Simplify Path 3 1 string stack&lt;/p&gt;

&lt;p&gt;72 Edit Distance 4 3 string dp&lt;/p&gt;

&lt;p&gt;73 Set Matrix Zeroes 3 5 array&lt;/p&gt;

&lt;p&gt;74 Search a 2D Matrix 3 3 array binary search&lt;/p&gt;

&lt;p&gt;75 Sort Colors 4 2 array sort two pointers&lt;/p&gt;

&lt;p&gt;76 Minimum Window Substring 4 2 string two pointers&lt;/p&gt;

&lt;p&gt;77 Combinations 3 4 combination&lt;/p&gt;

&lt;p&gt;78 Subsets 3 4 array recursion combination&lt;/p&gt;

&lt;p&gt;79 Word Search 3 4 array dfs&lt;/p&gt;

&lt;p&gt;80 Remove Duplicates from Sorted Array II 2 2 array two pointers&lt;/p&gt;

&lt;p&gt;81 Search in Rotated Sorted Array II 5 3 array binary search&lt;/p&gt;

&lt;p&gt;82 Remove Duplicates from Sorted List II 3 3 linked list recursion two pointers&lt;/p&gt;

&lt;p&gt;83 Remove Duplicates from Sorted List 1 3 linked list&lt;/p&gt;

&lt;p&gt;84 Largest Rectangle in Histogram 5 2 array stack&lt;/p&gt;

&lt;p&gt;85 Maximal Rectangle 5 1 array dp stack&lt;/p&gt;

&lt;p&gt;86 Partition List 3 3 linked list two pointers&lt;/p&gt;

&lt;p&gt;87 Scramble String 5 2 string recursion dp&lt;/p&gt;

&lt;p&gt;88 Merge Sorted Array 2 5 array two pointers merge&lt;/p&gt;

&lt;p&gt;89 Gray Code 4 2 combination&lt;/p&gt;

&lt;p&gt;90 Subsets II 4 2 array recursion combination&lt;/p&gt;

&lt;p&gt;91 Decode Ways 3 4 string recursion dp&lt;/p&gt;

&lt;p&gt;92 Reverse Linked List II 3 2 linked list two pointers&lt;/p&gt;

&lt;p&gt;93 Restore IP Addresses 3 3 string dfs&lt;/p&gt;

&lt;p&gt;94 Binary Tree Inorder Traversal 4 3 tree hashtable recursion morris stack&lt;/p&gt;

&lt;p&gt;95 Unique Binary Search Trees II 4 1 tree dp dfs&lt;/p&gt;

&lt;p&gt;96 Unique Binary Search Trees 3 1 tree dp&lt;/p&gt;

&lt;p&gt;97 Interleaving String 5 2 string recursion dp&lt;/p&gt;

&lt;p&gt;98 Validate Binary Search Tree 3 5 tree dfs&lt;/p&gt;

&lt;p&gt;99 Recover Binary Search Tree 4 2 tree dfs&lt;/p&gt;

&lt;p&gt;100 Same Tree 1 1 tree dfs&lt;/p&gt;

&lt;p&gt;101 Symmetric Tree 1 2 tree dfs&lt;/p&gt;

&lt;p&gt;102 Binary Tree Level Order Traversal 3 4 tree bfs&lt;/p&gt;

&lt;p&gt;103 Binary Tree Zigzag Level Order Traversal 4 3 queue tree bfs stack&lt;/p&gt;

&lt;p&gt;104 Maximum Depth of Binary Tree 1 1 tree dfs&lt;/p&gt;

&lt;p&gt;105 Construct Binary Tree from Preorder and Inorder Tr 3 3 array tree dfs&lt;/p&gt;

&lt;p&gt;106 Construct Binary Tree from Inorder and Postorder T 3 3 array tree dfs&lt;/p&gt;

&lt;p&gt;107 Binary Tree Level Order Traversal II 3 1 tree bfs&lt;/p&gt;

&lt;p&gt;108 Convert Sorted Array to Binary Search Tree 2 3 tree dfs&lt;/p&gt;

&lt;p&gt;109 Convert Sorted List to Binary Search Tree 4 3 linked list recursion two pointers&lt;/p&gt;

&lt;p&gt;110 Balanced Binary Tree 1 2 tree dfs&lt;/p&gt;

&lt;p&gt;111 Minimum Depth of Binary Tree 1 1 tree dfs&lt;/p&gt;

&lt;p&gt;112 Path Sum 1 3 tree dfs&lt;/p&gt;

&lt;p&gt;113 Path Sum II 2 2 tree dfs&lt;/p&gt;

&lt;p&gt;114 Flatten Binary Tree to Linked List 3 3 tree recursion stack&lt;/p&gt;

&lt;p&gt;115 Distinct Subsequences 4 2 string dp&lt;/p&gt;

&lt;p&gt;116 Populating Next Right Pointers in Each Node 3 3 tree dfs&lt;/p&gt;

&lt;p&gt;117 Populating Next Right Pointers in Each Node II 4 2 tree dfs&lt;/p&gt;

&lt;p&gt;118 Pascal’s Triangle 2 1 array&lt;/p&gt;

&lt;p&gt;119 Pascal’s Triangle II 2 1 array&lt;/p&gt;

&lt;p&gt;120 Triangle 3 1 array dp&lt;/p&gt;

&lt;p&gt;121 Best Time to Buy and Sell Stock 2 1 array dp&lt;/p&gt;

&lt;p&gt;122 Best Time to Buy and Sell Stock II 3 1 array greedy&lt;/p&gt;

&lt;p&gt;123 Best Time to Buy and Sell Stock III 4 1 array dp&lt;/p&gt;

&lt;p&gt;124 Binary Tree Maximum Path Sum 4 2 tree dfs&lt;/p&gt;

&lt;p&gt;125 Valid Palindrome 2 5 string two pointers&lt;/p&gt;

&lt;p&gt;126 Word Ladder II 1 1&lt;/p&gt;

&lt;p&gt;127 Word Ladder 3 5 graph bfs shortest path&lt;/p&gt;

&lt;p&gt;128 Longest Consecutive Sequence 4 3 array&lt;/p&gt;

&lt;p&gt;129 Sum Root to Leaf Numbers 2 4 tree dfs&lt;/p&gt;

&lt;p&gt;130 Surrounded Regions 4 3 array bfs dfs&lt;/p&gt;

&lt;p&gt;131 Palindrome Partitioning 3 4 string dfs&lt;/p&gt;

&lt;p&gt;132 Palindrome Partitioning II 4 3 string dp&lt;/p&gt;

&lt;h2 id=&quot;_2&quot;&gt;面试题按照数据结构分类&lt;/h2&gt;

&lt;h3 id=&quot;dynamic_programming&quot;&gt;Dynamic Programming&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Edit Distance
Maximum Subarray
Minimum Path Sum
Unique Paths
Unique Paths II
Longest Palindromic Substring
Interleaving String
Triangle
Distinct Subsequences
Decode Ways
Palindrome Partitioning II
Maximal Rectangle&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;recursion&quot;&gt;Recursion&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;N-Queens
N-Queens II
Balanced Binary Tree
Binary Tree Inorder Traversal
Binary Tree Maximum Path Sum
Convert Sorted Array to Binary Search Tree
Convert Sorted List to Binary Search Tree
Flatten Binary Tree to Linked List
Maximum Depth of Binary Tree
Minimum Depth of Binary Tree
Path Sum
Permutations
Permutations II
Populating Next Right Pointers in Each Node
Pow(x, n)
Same Tree
Subsets
Sum Root to Leaf Numbers
Swap Nodes in Pairs
Symmetric Tree
Valid Palindrome
Validate Binary Search Tree
Restore IP Addresses
Combinations
Interleaving String (dp is the best)
Combination Sum II
Letter Combinations of a Phone Numbers
Word Search
Construct Binary Tree from Inorder and Postorder Traversal
Construct Binary Tree from Preorder and Inorder Traversal
Generate Parentheses
Surrounded Regions (runtime error)
Palindrome Partitioning
Combination Sum
Sudoku Solver
Unique Binary Search Trees II&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;binary_search&quot;&gt;Binary Search&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Search Insert Position
Search a 2D Matrix
Search for a Range
Search in Rotated Sorted Array
Sqrt(x)&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;sequence&quot;&gt;Sequence&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Container With Most Water
Count and Say
First Missing Positive
Implement strStr()
Jump Game
Jump Game II
Length of Last Word
Longest Common Prefix
Longest Substring Without Repeating Characters
Merge Sorted Array
Palindrome Number
Plus One
Remove Duplicates from Sorted Array
Remove Duplicates from Sorted Array II
Remove Element
Reverse Integer
Search in Rotated Sorted Array II
Sort Colors
Two Sum
3Sum
3Sum Closest
4Sum
Add Binary
Longest Palindromic Substring
Next Permutation
Longest Valid Parentheses
Climbing Stairs
Permutation Sequence
Simplify Path
String to Integer (atoi)
Minimum Window Substring
Longest Consecutive Sequence
Trapping Rain Water
Valid Number&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;linked_list&quot;&gt;Linked List&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Add Two Numbers
Convert Sorted List to Binary Search Tree
Merge Two Sorted Lists
Partition List
Remove Duplicates from Sorted List
Remove Duplicates from Sorted List II
Remove Nth Node From End of List
Reverse Linked List II
Reverse Nodes in k-Group
Rotate List
Swap Nodes in Pairs&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;stack&quot;&gt;Stack&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Binary Tree Inorder Traversal
Binary Tree Level Order Traversal II
Valid Parentheses&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;queue&quot;&gt;Queue&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Binary Tree Level Order Traversal
Binary Tree Level Order Traversal II
Populating Next Right Pointers in Each Node II
Symmetric Tree
Surrounded Regions
Word Ladder&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;tree&quot;&gt;Tree&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Balanced Binary Tree
Binary Tree Inorder Traversal
Binary Tree Level Order Traversal
Binary Tree Level Order Traversal II
Binary Tree Maximum Path Sum
Convert Sorted Array to Binary Search Tree
Convert Sorted List to Binary Search Tree
Flatten Binary Tree to Linked List
Maximum Depth of Binary Tree
Minimum Depth of Binary Tree
Path Sum
Same Tree
Sum Root to Leaf Numbers
Symmetric Tree
Validate Binary Search Tree&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Reference:&lt;/code&gt; Coffee-Coder: Leetcode 题目分类 http://blog.csdn.net/fightforyourdream/article/details/12705509&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Reference:&lt;/code&gt; Author: peking2 Source: http://leetcode.cloudfoundry.com/&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Shortest Path And Flow Network Problem</title>
   <link href="http://Octavianus.github.io/technology/2013/12/25/Shortest-Path-and-Flow-Network-Problem"/>
   <updated>2013-12-25T00:00:00-08:00</updated>
   <id>http://Octavianus.github.io/technology/2013/12/25/Shortest-Path-and-Flow-Network-Problem</id>
   <content type="html">&lt;h4 id=&quot;flow_network_problem&quot;&gt;FLow Network problem&lt;/h4&gt;

&lt;p&gt;This is all the algorithm and method that can find the maximum flow in the flow network problem with different complexity in space and time.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ford-Fulkerson (Time complexity based on how many augmenting path it has.)&lt;/li&gt;

&lt;li&gt;Edmonds karp ( O(VE^2) in time)&lt;/li&gt;

&lt;li&gt;Minimum Cut Maximum method&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;shortest_path_problem&quot;&gt;Shortest Path problem.&lt;/h4&gt;

&lt;p&gt;This is all the algorithm and method that can find the shortest path in a graph with different complexity in space and time.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Floyd-Warshll (O(V^3) in time, compute the distance of all the postible pairs of path, can reconstruct the path after modifying the algorithm)&lt;/li&gt;

&lt;li&gt;Dijkstra ( Greedy Algo, time complexity is depended on the data structure which stores the the vertex such as binary heap, skiplist, MST, Fabonacci heap or array, BST etc.)&lt;/li&gt;

&lt;li&gt;Breadth First Search ( O(V+E) in tiem, undirect graph)&lt;/li&gt;

&lt;li&gt;Bellman-Ford ( O(VE) in time specified for negtive-weight or negtive circles )&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;other_graph_theory_problem&quot;&gt;Other graph theory problem&lt;/h4&gt;

&lt;p&gt;These problem can be solved by building up a Integer Linear Proggraming model, set up a goal function, and assume all the variables which obey the capacity constraint and flow conservation. At last minimize goal function.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Minimum edage cover &lt;strong&gt;&lt;em&gt;(use ILP)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;Minimum vertex cover &lt;strong&gt;&lt;em&gt;(use ILP Approximation method)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;LP formulation Assume that every vertex has an associated cost of c(v)&amp;gt;= 0. The (weighted) minimum vertex cover problem can be formulated as the following integer linear program (ILP).&lt;/p&gt;

&lt;p&gt;This ILP belongs to the more general class of ILPs for covering problems. The integrality gap of this ILP is 2, so its relaxation gives a factor-2 approximation algorithm for the minimum vertex cover problem. Furthermore, the linear programming relaxation of that ILP is half-integral, that is, there exists an optimal solution for which each entry x_v is either 0, 1/2, or 1.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Debug The File System</title>
   <link href="http://Octavianus.github.io/technology/2013/12/25/Debug-the-file-system"/>
   <updated>2013-12-25T00:00:00-08:00</updated>
   <id>http://Octavianus.github.io/technology/2013/12/25/Debug-the-file-system</id>
   <content type="html">&lt;h4 id=&quot;bug&quot;&gt;调试一个文件系统会面临诸多的问题，如果方式不对，即使通宵一整夜也无法找到问题所在，相信我，我们需要竟可能的缩小出现bug的可能情况。&lt;/h4&gt;

&lt;p&gt;所以程序员需要有合适的工具帮助他们快速定位错误。 譬如从一个文件系统的上层设计的角度，你需要跟踪一个变量从上层传递到下一层有哪些操作改变了他们的值，这个时候&lt;code&gt;gdb&lt;/code&gt;就能满足要求，设置判断条件，逐层设置断点观察变量。 再从另外一个角度，一个文件系统的底层设计涉及到大量的内存操作，拷贝一段内容到内存，从一个指针指向的内存地址读出指定长度的数据等等.经常会出现segment fault然后core dump. 造成段错误的原因有很多，对于一个文件系统来说以下问题更为常见：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;内存访问越界：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(a) 在搜索字符串时，依靠字符串结束符来判断字符串是否结束，但是字符串没有正常的使用结束符。&lt;/li&gt;

&lt;li&gt;(b) 最常见的要数使用strcpy, strcat, sprintf, strcmp, strcasecmp等字符串操作函数，将目标字符串读/写爆。应该使用strncpy, strlcpy, strncat, strlcat, snprintf, strncmp, strncasecmp等函数防止读写越界。 可是很多人偷懒，疲于仔细计算每一个分配的空间需要的字节数，或者计算错误导致越界&lt;/li&gt;

&lt;li&gt;(c) 另外要说明的是memcpy更是一个重灾区,详细内容会在后面说。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;非法指针：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(a) 使用空指针&lt;/li&gt;

&lt;li&gt;(b) 随意使用指针转换。一个指向一段内存的指针，除非确定这段内存原先就分配为某种结构或类型，或者这种结构或类型的数组，否则不要将它转换为这种结构或类型 的指针，而应该将这段内存拷贝到一个这种结构或类型中，再访问这个结构或类型。这是因为如果这段内存的开始地址不是按照这种结构或类型对齐的，那么访问它 时就很容易因为bus error而core dump.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;堆栈溢出：不要使用大的局部变量（因为局部变量都分配在栈上），这样容易造成堆栈溢出，破坏系统的栈和堆结构，导致出现莫名其妙的错误。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个时候，生成内存内核转储文件，把程序工作的当前状态存储成一个文件结合gdb调试。&lt;a href=&quot;http://blog.csdn.net/hust_wusen/article/details/8776116&quot;&gt;代码调试–先内核转储文件再gdb调试&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;另外一个强大的调试工具Valgrind也可以解决这类问题，我极力推荐，valgrind可以检查内存使用是否存在非法内存访问，和内存泄漏。 调试的过程如下&lt;/p&gt;

&lt;pre class=&quot;c&quot;&gt;&lt;code class=&quot;c&quot;&gt;
     David:  ==9166== Invalid read of size 4
    ==9166==    at 0x804A5AC: LFS_Open (LFS.c:155)
    ==9166==    by 0x804A6E6: LFS_Mkdir (LFS.c:183)
    ==9166==    by 0x405266B: fuse_mkdir (fuse.c:1223)
    ==9166==    by 0xFFFFFFFD: ???
    ==9166==  Address 0x430799c is not stack'd, malloc'd or (recently) free'd
     Sent at 7:14 PM on Tuesday
     David:  ==9265== Invalid write of size 4
    ==9265==    at 0x8048DE8: Dir_Open_File (dir.c:106)
    ==9265==    by 0x804A5BA: LFS_Open (LFS.c:156)
    ==9265==    by 0x804A6C8: LFS_Mkdir (LFS.c:183)
    ==9265==    by 0x405266B: fuse_mkdir (fuse.c:1223)
    ==9265==    by 0xFFFFFFFD: ???
    ==9265== Address 0x4307998 is 12 bytes after a block of size 4 alloc'd
    ==9265==    at 0x402BE68: malloc (in /usr/lib/valgrind/vgpreload_memcheck-x86-linux.so)
    // open a directory or file
    int Dir_Open_File(const char *path, struct fuse_file_info *fi)
    {
           Inode *myNode;
           int status;
    
           status = Get_Inode(path, &amp;amp;myNode);
           if(status) {printf(&amp;quot;openning file fail\n&amp;quot;); return status;}
    
           printf(&amp;quot;---------------------------ino: %d \n&amp;quot;, myNode&amp;gt;ino);
           fi-&amp;gt;fh = myNode-&amp;gt;ino;
    
           return status;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到再没出现问题的时候会有这样的提示&lt;code&gt;==9166== Invalid read of size 4&lt;/code&gt;and&lt;code&gt;==9265== Invalid write of size 4&lt;/code&gt;这个4个单位的读和写可以一直追踪到造成越界读或者写操作涉及的函数。 或者更多的是某个地址空间出现的问&lt;code&gt;Address 0x4307998 is 12 bytes after a block of size 4 alloc'd&lt;/code&gt;，我们都可以根据这些提示信息定位问题并且修复，就上面一个问题而言，段错误出现在fuse中，然而fuse是久经考验的客户态文件系统开发库，不会有问题，用gdb发现之所以是fuse内部报段错误，是因为他内部的一个结构指针莫名其妙的变为0了，访问的时候就成segment fault了。 我继续跟踪了下，最后发现了源头在log.c:1320文件中的writeToLog函数中的memcpy函数，然后我用valgrind检查了下内存访问情况，发现在这个地方的确存在非法内存写，也就是说在这个memcpy中覆盖了堆中的其他内存区域，造成了fuse内部那个结构指针变为0，报段错误我跟踪的时候发现每次创建文件的时候调用三次WriteToLog函数，第二次创建就会失败，我发现在创建第二个文件时，第二次还是第三次调用WriteToLog文件时会有内存覆盖，所以在这个创建操作返回到fuse框架内部后，就会有段错误 之后我们好好想想这个拷贝函数的内存地址你计算对了没之后，查到问题的确出在memcpy这个函数， copy大小和分配的大小要一致，否则就会越界访问。 之前存一个自定义的数据结构segment,一个指针类型的变量tseg的时候，比如那个结构中存有指向其他地址的指针，即使想计算sizeof(tseg). 但是指针存的内容无法计算出来，只有通过这种方法计算出来才能分配到真确的空间:&lt;/p&gt;

&lt;pre class=&quot;c&quot;&gt;&lt;code class=&quot;c&quot;&gt;
memcpy(buffer + offset, cache_walker-&amp;gt;seg
        + log_addr-&amp;gt;bk_no * bk_size * FLASH_SECTOR_SIZE,
        bks_remain * bk_size * FLASH_SECTOR_SIZE);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;先声明成void 指针的类型然后用的时候再cast成想要的结构类型 最后就是一个一个的解决 invaliad write of x bytes的问题一个一个算对，就没有bug了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Valgrind可以给你带来希望！因为当出现段错误时，使用Valgrind运行程序就不一定会出错，因为Valgrind有着不同的内存分配机制，也许在之前环境下出现了段错误，在valgrind下就可以正常运行了，不过内存覆盖或者读越界的问题仍然存在，只是越界的区域内的内容不是关键内容，所以程序仍然可以正常运行。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;&quot;&gt;排除了程序运行的问题以后，给大家介绍另外一个工具&lt;a href=&quot;http://valgrind.org/info/tools.html#callgrind&quot;&gt;&lt;code&gt;callgrind&lt;/code&gt;&lt;/a&gt;,它可以分析程序每个函数所使用的时间，分析系统瓶颈很方便.&lt;/h4&gt;</content>
 </entry>
 
 <entry>
   <title>Connect Lg Hbs 730 To Laptop</title>
   <link href="http://Octavianus.github.io/technology/2013/12/24/Connect-LG-HBS-730-to-Laptop"/>
   <updated>2013-12-24T00:00:00-08:00</updated>
   <id>http://Octavianus.github.io/technology/2013/12/24/Connect-LG-HBS-730-to-Laptop</id>
   <content type="html">&lt;p&gt;To setup a bluetooth headset such as &lt;strong&gt;LG HBS 730&lt;/strong&gt; to a windows 7 laptop, you just need to follow the steps below :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1.The first thing to do is to open your laptop bluetooth.&lt;/li&gt;

&lt;li&gt;2.On dell laptop you need to press FN + F2 and it will prompt and on and off option for bluetooth.&lt;/li&gt;

&lt;li&gt;3.Then Go to Start Menu - &amp;gt; Devices and Printers.&lt;/li&gt;

&lt;li&gt;4.On the upper left part of the screen you will see &lt;code&gt;add a device&lt;/code&gt; Click on it.&lt;/li&gt;

&lt;li&gt;5.It will search for a device.&lt;/li&gt;

&lt;li&gt;6.Get your bluetooth headset.&lt;/li&gt;

&lt;li&gt;7.Turn on the bluetooth and wait for the light to turn blue.&lt;/li&gt;

&lt;li&gt;8.Your laptop will detect the bluetooth headset.&lt;/li&gt;

&lt;li&gt;9.On your laptop select the bluetooth headset and click next.&lt;/li&gt;

&lt;li&gt;10.Then finish the setup.&lt;/li&gt;

&lt;li&gt;&lt;code&gt;11&lt;/code&gt;.The next thing to do is to go on your computer control panel - &amp;gt; then go to sound - &amp;gt; go to playback - &amp;gt; And select your bluetooth headset - &amp;gt; then set it &lt;code&gt;as default&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;step 11 is the critical step that most of us have forgotten for connection. If it is already set as default or if it is already working then skip the last step. After that, our device should hear the sound from our laptop now, if you have a microphone on your headset, it also should work if you follow all the steps.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>为何投身独立博客</title>
   <link href="http://Octavianus.github.io/thought/2013/12/22/%E4%B8%BA%E4%BD%95%E6%8A%95%E8%BA%AB%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2"/>
   <updated>2013-12-22T00:00:00-08:00</updated>
   <id>http://Octavianus.github.io/thought/2013/12/22/为何投身独立博客</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;有人说过，博客已死。&lt;/strong&gt;这个人的网名叫木遥，是一个多产的个人博主，但是我想木遥指的应该是公共博客，因为私人的博客永远不用担心运营商把他们的博客改造成什么难看的样子，增加什么难用的特性，更不用担心有朝一日他们会像MSN一样被收购，甚至被被迫关闭。另外一点，也是最重要的，每个人都有写作的欲望。私人博客具备更发散的功能，且不从商业价值考虑，就记录自己的故事和想法来说，博客也永远不会消失。&lt;/p&gt;

&lt;p&gt;曾经有些日子，我把木遥的博客当饭吃。觉得此人在文笔和思想方面和我相似，但是比我有更加深入和成熟的一套写作机制。我承认十分敬佩此人，他和我在美国工作学习多年的表哥有相仿的年纪，相似的背景，可是我对我表哥的了解，除了他对我的关心和照顾以外，看不到他这么多年经历过的荣辱起伏。但是表哥对我承认过刚到美国来的捉襟见肘，在木要的博客里，看到他当初也如此，似乎距离感小了很多。话说回来，我之所以佩服他，是因为我觉得木遥已经具备了靠博客养活自己的能力了：他写的科技类文章拨乱反正有理有据，叙述类小说逻辑清晰用词考究，社会热点话题也表现出观点独到又不失面面俱到的本领。&lt;/p&gt;

&lt;p&gt;他喜欢将生活中的突发奇想用在写作里，就好比他的小说留学记中说：“现在女生都喜欢刺激，你光对她好没用，你得带着她去干她没干过的事情。她一激动一紧张，就觉得对你有感觉了。” 当时我有一种一拍即合的认同感。再来，他更善于总结并且表达出来，这是最可贵的一点，具体的可以参见他的博客，&lt;a href=&quot;http://blog.farmostwood.net/&quot;&gt;木遥的窗子&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;我一直都珍惜别人的认真写作，说的俗一点，写作是思维的结晶，要把所想变成文章，需要大量的原创设计，一份调查表示: 写作对任何人同样的困难，无论学历，年纪和行业。好的写作可以让别人见文如见其人，很快的喜欢上你，也可以让自己变得透明，让读者了解最真实的自己。所以我产生了这样的想法，看牛人的博客如果从学习新知的角度，最好看TA最新的文章，如果想按图索骥摸索方法，最好看TA和你同年龄段时写的文章。所以我不会再看过木遥的博客之后妄自菲薄了，做好应该做的，想好将要做的，循环下去就足够了。&lt;/p&gt;

&lt;p&gt;在这样的想法催生下，farmosteast的博客就此诞生了。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;博客的设计方案&lt;/strong&gt;，主要来自于几个我在比较熟知的博主：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;年糕 : &lt;a href=&quot;http://yanran.li/&quot;&gt;Yanran’s Attic&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;阳志平 : &lt;a href=&quot;http://www.yangzhiping.com/&quot;&gt;阳志平的个人网站&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;木遥 : &lt;a href=&quot;http://blog.farmostwood.net/&quot;&gt;木遥的窗子&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;他们写作的目的仅仅是为了知识的总结和传播，如果想更好的利用博客实现盈利，应该看看这篇文章。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.36kr.com/p/207786.html&quot;&gt;不懂代码？创业照样进行&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这篇文章主要介绍的是我们熟知的Wordpress,由于有独立的数据库存储博客数据，在拥有大量的博客数据的情况下，Wordpress有更好的性能，更短的网页构建时间，当然也更稳定。所以大中型商用网站会更倾向于选择Wordpress；同时，Wordpress具有大量的免费和收费插件,例如博客流量分析和访客点击分析等助于博客定位和推广的工具。我采用的ruby开源博客框架jekyll是没有独立数据库的，所有数据存储在github上，每次访问都会生成静态代码，并且由github提供博客的的访问服务。我想自己不会因为写了太多的文章以至于让博客崩溃掉吧，maybe one day&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>How To</title>
   <link href="http://Octavianus.github.io/technology/2013/12/21/How-To"/>
   <updated>2013-12-21T00:00:00-08:00</updated>
   <id>http://Octavianus.github.io/technology/2013/12/21/How-To</id>
   <content type="html">&lt;p&gt;This Jekyll introduction will outline specifically what Jekyll is and why you would want to use it. Directly following the intro we’ll learn exactly &lt;em&gt;how&lt;/em&gt; Jekyll does what it does.&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;h3 id=&quot;what_is_jekyll&quot;&gt;What is Jekyll?&lt;/h3&gt;

&lt;p&gt;Jekyll is a parsing engine bundled as a ruby gem used to build static websites from dynamic components such as templates, partials, liquid code, markdown, etc. Jekyll is known as “a simple, blog aware, static site generator”.&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;p&gt;This website is created with Jekyll. &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Sites&quot;&gt;Other Jekyll websites&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;what_does_jekyll_do&quot;&gt;What does Jekyll Do?&lt;/h3&gt;

&lt;p&gt;Jekyll is a ruby gem you install on your local system. Once there you can call &lt;code&gt;jekyll --server&lt;/code&gt; on a directory and provided that directory is setup in a way jekyll expects, it will do magic stuff like parse markdown/textile files, compute categories, tags, permalinks, and construct your pages from layout templates and partials.&lt;/p&gt;

&lt;p&gt;Once parsed, Jekyll stores the result in a self-contained static &lt;code&gt;_site&lt;/code&gt; folder. The intention here is that you can serve all contents in this folder statically from a plain static web-server.&lt;/p&gt;

&lt;p&gt;You can think of Jekyll as a normalish dynamic blog but rather than parsing content, templates, and tags on each request, Jekyll does this once &lt;em&gt;beforehand&lt;/em&gt; and caches the &lt;em&gt;entire website&lt;/em&gt; in a folder for serving statically.&lt;/p&gt;

&lt;h3 id=&quot;jekyll_is_not_blogging_software&quot;&gt;Jekyll is Not Blogging Software&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Jekyll is a parsing engine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jekyll does not come with any content nor does it have any templates or design elements. This is a common source of confusion when getting started. Jekyll does not come with anything you actually use or see on your website - you have to make it.&lt;/p&gt;

&lt;h3 id=&quot;why_should_i_care&quot;&gt;Why Should I Care?&lt;/h3&gt;

&lt;p&gt;Jekyll is very minimalistic and very efficient. The most important thing to realize about Jekyll is that it creates a static representation of your website requiring only a static web-server. Traditional dynamic blogs like Wordpress require a database and server-side code. Heavily trafficked dynamic blogs must employ a caching layer that ultimately performs the same job Jekyll sets out to do; serve static content.&lt;/p&gt;

&lt;p&gt;Therefore if you like to keep things simple and you prefer the command-line over an admin panel UI then give Jekyll a try.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developers like Jekyll because we can write content like we write code:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ability to write content in markdown or textile in your favorite text-editor.&lt;/li&gt;

&lt;li&gt;Ability to write and preview your content via localhost.&lt;/li&gt;

&lt;li&gt;No internet connection required.&lt;/li&gt;

&lt;li&gt;Ability to publish via git.&lt;/li&gt;

&lt;li&gt;Ability to host your blog on a static web-server.&lt;/li&gt;

&lt;li&gt;Ability to host freely on GitHub Pages.&lt;/li&gt;

&lt;li&gt;No database required.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;how_jekyll_works&quot;&gt;How Jekyll Works&lt;/h1&gt;

&lt;p&gt;The following is a complete but concise outline of exactly how Jekyll works.&lt;/p&gt;

&lt;p&gt;Be aware that core concepts are introduced in rapid succession without code examples. This information is not intended to specifically teach you how to do anything, rather it is intended to give you the &lt;em&gt;full picture&lt;/em&gt; relative to what is going on in Jekyll-world.&lt;/p&gt;

&lt;p&gt;Learning these core concepts should help you avoid common frustrations and ultimately help you better understand the code examples contained throughout Jekyll-Bootstrap.&lt;/p&gt;

&lt;h2 id=&quot;initial_setup&quot;&gt;Initial Setup&lt;/h2&gt;

&lt;p&gt;After &lt;a href=&quot;/index.html#start-now&quot;&gt;installing jekyll&lt;/a&gt; you’ll need to format your website directory in a way jekyll expects. Jekyll-bootstrap conveniently provides the base directory format.&lt;/p&gt;

&lt;h3 id=&quot;the_jekyll_application_base_format&quot;&gt;The Jekyll Application Base Format&lt;/h3&gt;

&lt;p&gt;Jekyll expects your website directory to be laid out like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- _config.yml
|-- _includes
|-- _layouts
|   |-- default.html
|   |-- post.html
|-- _posts
|   |-- 2011-10-25-open-source-is-good.markdown
|   |-- 2011-04-26-hello-world.markdown
|-- _site
|-- index.html
|-- assets
    |-- css
        |-- style.css
    |-- javascripts&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt; Stores configuration data.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_includes&lt;/strong&gt; This folder is for partial views.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_layouts&lt;/strong&gt; This folder is for the main templates your content will be inserted into. You can have different layouts for different pages or page sections.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_posts&lt;/strong&gt; This folder contains your dynamic content/posts. the naming format is required to be &lt;code&gt;@YEAR-MONTH-DATE-title.MARKUP@&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_site&lt;/strong&gt; This is where the generated site will be placed once Jekyll is done transforming it.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;assets&lt;/strong&gt; This folder is not part of the standard jekyll structure. The assets folder represents &lt;em&gt;any generic&lt;/em&gt; folder you happen to create in your root directory. Directories and files not properly formatted for jekyll will be left untouched for you to serve normally.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(read more: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Usage&quot;&gt;https://github.com/mojombo/jekyll/wiki/Usage&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;jekyll_configuration&quot;&gt;Jekyll Configuration&lt;/h3&gt;

&lt;p&gt;Jekyll supports various configuration options that are fully outlined here: (&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Configuration&quot;&gt;https://github.com/mojombo/jekyll/wiki/Configuration&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;content_in_jekyll&quot;&gt;Content in Jekyll&lt;/h2&gt;

&lt;p&gt;Content in Jekyll is either a post or a page. These content “objects” get inserted into one or more templates to build the final output for its respective static-page.&lt;/p&gt;

&lt;h3 id=&quot;posts_and_pages&quot;&gt;Posts and Pages&lt;/h3&gt;

&lt;p&gt;Both posts and pages should be written in markdown, textile, or HTML and may also contain Liquid templating syntax. Both posts and pages can have meta-data assigned on a per-page basis such as title, url path, as well as arbitrary custom meta-data.&lt;/p&gt;

&lt;h3 id=&quot;working_with_posts&quot;&gt;Working With Posts&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Post&lt;/strong&gt; Posts are created by properly formatting a file and placing it the &lt;code&gt;_posts&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt; A post must have a valid filename in the form &lt;code&gt;YEAR-MONTH-DATE-title.MARKUP&lt;/code&gt; and be placed in the &lt;code&gt;_posts&lt;/code&gt; directory. If the data format is invalid Jekyll will not recognize the file as a post. The date and title are automatically parsed from the filename of the post file. Additionally, each file must have &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt; prepended to its content. YAML Front-Matter is a valid YAML syntax specifying meta-data for the given file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Order&lt;/strong&gt; Ordering is an important part of Jekyll but it is hard to specify a custom ordering strategy. Only reverse chronological and chronological ordering is supported in Jekyll.&lt;/p&gt;

&lt;p&gt;Since the date is hard-coded into the filename format, to change the order, you must change the dates in the filenames.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt; Posts can have tags associated with them as part of their meta-data. Tags may be placed on posts by providing them in the post’s YAML front matter. You have access to the post-specific tags in the templates. These tags also get added to the sitewide collection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories&lt;/strong&gt; Posts may be categorized by providing one or more categories in the YAML front matter. Categories offer more significance over tags in that they can be reflected in the URL path to the given post. Note categories in Jekyll work in a specific way. If you define more than one category you are defining a category hierarchy “set”. Example:&lt;/p&gt;
&lt;hr /&gt;
&lt;pre&gt;&lt;code&gt;title :  Hello World
categories : [lessons, beginner]&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;This defines the category hierarchy “lessons/beginner”. Note this is &lt;em&gt;one category&lt;/em&gt; node in Jekyll. You won’t find “lessons” and “beginner” as two separate categories unless you define them elsewhere as singular categories.&lt;/p&gt;

&lt;h3 id=&quot;working_with_pages&quot;&gt;Working With Pages&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Page&lt;/strong&gt; Pages are created by properly formatting a file and placing it anywhere in the root directory or subdirectories that do &lt;em&gt;not&lt;/em&gt; start with an underscore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt; In order to register as a Jekyll page the file must contain &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt;. Registering a page means 1) that Jekyll will process the page and 2) that the page object will be available in the &lt;code&gt;site.pages&lt;/code&gt; array for inclusion into your templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories and Tags&lt;/strong&gt; Pages do not compute categories nor tags so defining them will have no effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sub-Directories&lt;/strong&gt; If pages are defined in sub-directories, the path to the page will be reflected in the url. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- people
    |-- bob
        |-- essay.html&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This page will be available at &lt;code&gt;http://yourdomain.com/people/bob/essay.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommended Pages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index.html&lt;/strong&gt; You will always want to define the root index.html page as this will display on your root URL.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;404.html&lt;/strong&gt; Create a root 404.html page and GitHub Pages will serve it as your 404 response.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;sitemap.html&lt;/strong&gt; Generating a sitemap is good practice for SEO.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;about.html&lt;/strong&gt; A nice about page is easy to do and gives the human perspective to your website.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;templates_in_jekyll&quot;&gt;Templates in Jekyll&lt;/h2&gt;

&lt;p&gt;Templates are used to contain a page’s or post’s content. All templates have access to a global site object variable: &lt;code&gt;site&lt;/code&gt; as well as a page object variable: &lt;code&gt;page&lt;/code&gt;. The site variable holds all accessible content and metadata relative to the site. The page variable holds accessible data for the given page or post being rendered at that point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a Template&lt;/strong&gt; Templates are created by properly formatting a file and placing it in the &lt;code&gt;_layouts&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt; Templates should be coded in HTML and contain YAML Front Matter. All templates can contain Liquid code to work with your site’s data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rending Page/Post Content in a Template&lt;/strong&gt; There is a special variable in all templates named : &lt;code&gt;content&lt;/code&gt;. The &lt;code&gt;content&lt;/code&gt; variable holds the page/post content including any sub-template content previously defined. Render the content variable wherever you want your main content to be injected into your template:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
&amp;lt;body&amp;gt;
  &amp;lt;div id=&quot;sidebar&quot;&amp;gt; ... &amp;lt;/div&amp;gt;
  &amp;lt;div id=&quot;main&quot;&amp;gt;
    &amp;#123;{content}&amp;#125;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;subtemplates&quot;&gt;Sub-Templates&lt;/h3&gt;

&lt;p&gt;Sub-templates are exactly templates with the only difference being they define another “root” layout/template within their YAML Front Matter. This essentially means a template will render inside of another template.&lt;/p&gt;

&lt;h3 id=&quot;includes&quot;&gt;Includes&lt;/h3&gt;

&lt;p&gt;In Jekyll you can define include files by placing them in the &lt;code&gt;_includes&lt;/code&gt; folder. Includes are NOT templates, rather they are just code snippets that get included into templates. In this way, you can treat the code inside includes as if it was native to the parent template.&lt;/p&gt;

&lt;p&gt;Any valid template code may be used in includes.&lt;/p&gt;

&lt;h2 id=&quot;using_liquid_for_templating&quot;&gt;Using Liquid for Templating&lt;/h2&gt;

&lt;p&gt;Templating is perhaps the most confusing and frustrating part of Jekyll. This is mainly due to the fact that Jekyll templates must use the Liquid Templating Language.&lt;/p&gt;

&lt;h3 id=&quot;what_is_liquid&quot;&gt;What is Liquid?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/liquid&quot;&gt;Liquid&lt;/a&gt; is a secure templating language developed by &lt;a href=&quot;http://shopify.com&quot;&gt;Shopify&lt;/a&gt;. Liquid is designed for end-users to be able to execute logic within template files without imposing any security risk on the hosting server.&lt;/p&gt;

&lt;p&gt;Jekyll uses Liquid to generate the post content within the final page layout structure and as the primary interface for working with your site and post/page data.&lt;/p&gt;

&lt;h3 id=&quot;why_do_we_have_to_use_liquid&quot;&gt;Why Do We Have to Use Liquid?&lt;/h3&gt;

&lt;p&gt;GitHub uses Jekyll to power &lt;a href=&quot;http://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;. GitHub cannot afford to run arbitrary code on their servers so they lock developers down via Liquid.&lt;/p&gt;

&lt;h3 id=&quot;liquid_is_not_programmerfriendly&quot;&gt;Liquid is Not Programmer-Friendly.&lt;/h3&gt;

&lt;p&gt;The short story is liquid is not real code and its not intended to execute real code. The point being you can’t do jackshit in liquid that hasn’t been allowed explicitly by the implementation. What’s more you can only access data-structures that have been explicitly passed to the template.&lt;/p&gt;

&lt;p&gt;In Jekyll’s case it is not possible to alter what is passed to Liquid without hacking the gem or running custom plugins. Both of which cannot be supported by GitHub Pages.&lt;/p&gt;

&lt;p&gt;As a programmer - this is very frustrating.&lt;/p&gt;

&lt;p&gt;But rather than look a gift horse in the mouth we are going to suck it up and view it as an opportunity to work around limitations and adopt client-side solutions when possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside&lt;/strong&gt; My personal stance is to not invest time trying to hack liquid. It’s really unnecessary &lt;em&gt;from a programmer’s&lt;/em&gt; perspective. That is to say if you have the ability to run custom plugins (i.e. run arbitrary ruby code) you are better off sticking with ruby. Toward that end I’ve built &lt;a href=&quot;http://github.com/plusjade/mustache-with-jekyll&quot;&gt;Mustache-with-Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;static_assets&quot;&gt;Static Assets&lt;/h2&gt;

&lt;p&gt;Static assets are any file in the root or non-underscored subfolders that are not pages. That is they have no valid YAML Front Matter and are thus not treated as Jekyll Pages.&lt;/p&gt;

&lt;p&gt;Static assets should be used for images, css, and javascript files.&lt;/p&gt;

&lt;h2 id=&quot;how_jekyll_parses_files&quot;&gt;How Jekyll Parses Files&lt;/h2&gt;

&lt;p&gt;Remember Jekyll is a processing engine. There are two main types of parsing in Jekyll.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Content parsing.&lt;/strong&gt; This is done with textile or markdown.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Template parsing.&lt;/strong&gt; This is done with the liquid templating language.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And thus there are two main types of file formats needed for this parsing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Post and Page files.&lt;/strong&gt; All content in Jekyll is either a post or a page so valid posts and pages are parsed with markdown or textile.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Template files.&lt;/strong&gt; These files go in &lt;code&gt;_layouts&lt;/code&gt; folder and contain your blogs &lt;strong&gt;templates&lt;/strong&gt;. They should be made in HTML with the help of Liquid syntax. Since include files are simply injected into templates they are essentially parsed as if they were native to the template.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Arbitrary files and folders.&lt;/strong&gt; Files that &lt;em&gt;are not&lt;/em&gt; valid pages are treated as static content and pass through Jekyll untouched and reside on your blog in the exact structure and format they originally existed in.&lt;/p&gt;

&lt;h3 id=&quot;formatting_files_for_parsing&quot;&gt;Formatting Files for Parsing.&lt;/h3&gt;

&lt;p&gt;We’ve outlined the need for valid formatting using &lt;strong&gt;YAML Front Matter&lt;/strong&gt;. Templates, posts, and pages all need to provide valid YAML Front Matter even if the Matter is empty. This is the only way Jekyll knows you want the file processed.&lt;/p&gt;

&lt;p&gt;YAML Front Matter must be prepended to the top of template/post/page files:&lt;/p&gt;
&lt;hr /&gt;
&lt;pre&gt;&lt;code&gt;layout: post
category : pages
tags : [how-to, jekyll]&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;pre&gt;&lt;code&gt;... contents ...&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Three hyphens on a new line start the Front-Matter block and three hyphens on a new line end the block. The data inside the block must be valid YAML.&lt;/p&gt;

&lt;p&gt;Configuration parameters for YAML Front-Matter is outlined here: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;A comprehensive explanation of YAML Front Matter&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;defining_layouts_for_posts_and_templates_parsing&quot;&gt;Defining Layouts for Posts and Templates Parsing.&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;layout&lt;/code&gt; parameter in the YAML Front Matter defines the template file for which the given post or template should be injected into. If a template file specifies its own layout, it is effectively being used as a &lt;code&gt;sub-template.&lt;/code&gt; That is to say loading a post file into a template file that refers to another template file with work in the way you’d expect; as a nested sub-template.&lt;/p&gt;

&lt;h2 id=&quot;how_jekyll_generates_the_final_static_files&quot;&gt;How Jekyll Generates the Final Static Files.&lt;/h2&gt;

&lt;p&gt;Ultimately, Jekyll’s job is to generate a static representation of your website. The following is an outline of how that’s done:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll collects data.&lt;/strong&gt; Jekyll scans the posts directory and collects all posts files as post objects. It then scans the layout assets and collects those and finally scans other directories in search of pages.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll computes data.&lt;/strong&gt; Jekyll takes these objects, computes metadata (permalinks, tags, categories, titles, dates) from them and constructs one big &lt;code&gt;site&lt;/code&gt; object that holds all the posts, pages, layouts, and respective metadata. At this stage your site is one big computed ruby object.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll liquifies posts and templates.&lt;/strong&gt; Next jekyll loops through each post file and converts (through markdown or textile) and &lt;strong&gt;liquifies&lt;/strong&gt; the post inside of its respective layout(s). Once the post is parsed and liquified inside the the proper layout structure, the layout itself is “liquified”. &lt;strong&gt;Liquification&lt;/strong&gt; is defined as follows: Jekyll initiates a Liquid template, and passes a simpler hash representation of the ruby site object as well as a simpler hash representation of the ruby post object. These simplified data structures are what you have access to in the templates.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll generates output.&lt;/strong&gt; Finally the liquid templates are “rendered”, thereby processing any liquid syntax provided in the templates and saving the final, static representation of the file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Notes.&lt;/strong&gt; Because Jekyll computes the entire site in one fell swoop, each template is given access to a global &lt;code&gt;site&lt;/code&gt; hash that contains useful data. It is this data that you’ll iterate through and format using the Liquid tags and filters in order to render it onto a given page.&lt;/p&gt;

&lt;p&gt;Remember, in Jekyll you are an end-user. Your API has only two components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The manner in which you setup your directory.&lt;/li&gt;

&lt;li&gt;The liquid syntax and variables passed into the liquid templates.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All the data objects available to you in the templates via Liquid are outlined in the &lt;strong&gt;API Section&lt;/strong&gt; of Jekyll-Bootstrap. You can also read the original documentation here: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Template-Data&quot;&gt;https://github.com/mojombo/jekyll/wiki/Template-Data&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this paints a clearer picture of what Jekyll is doing and why it works the way it does. As noted, our main programming constraint is the fact that our API is limited to what is accessible via Liquid and Liquid only.&lt;/p&gt;

&lt;p&gt;Jekyll-bootstrap is intended to provide helper methods and strategies aimed at making it more intuitive and easier to work with Jekyll =)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you&lt;/strong&gt; for reading this far.&lt;/p&gt;

&lt;h2 id=&quot;next_steps&quot;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Please take a look at &lt;a href=&quot;&quot;&gt;&lt;/a&gt; or jump right into &lt;a href=&quot;&quot;&gt;Usage&lt;/a&gt; if you’d like.&lt;/p&gt;</content>
 </entry>
 
 
</feed>