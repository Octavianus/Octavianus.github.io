<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>farmosteast</title>
 <link href="http://Octavianus.github.io/" rel="self"/>
 <link href="http://Octavianus.github.io"/>
 <updated>2013-12-25T20:14:49-08:00</updated>
 <id>http://Octavianus.github.io</id>
 <author>
   <name>David</name>
   <email>weng@email.arizona.edu</email>
 </author>

 
 <entry>
   <title>Shortest Path And Flow Network Problem</title>
   <link href="http://Octavianus.github.io/technology/2013/12/25/Shortest-Path-and-Flow-Network-Problem"/>
   <updated>2013-12-25T00:00:00-08:00</updated>
   <id>http://Octavianus.github.io/technology/2013/12/25/Shortest-Path-and-Flow-Network-Problem</id>
   <content type="html">&lt;h4 id=&quot;flow_network_problem&quot;&gt;FLow Network problem&lt;/h4&gt;

&lt;p&gt;This is all the algorithm and method that can find the maximum flow in the flow network problem with different complexity in space and time.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ford-Fulkerson (Time complexity based on how many augmenting path it has.)&lt;/li&gt;

&lt;li&gt;Edmonds karp ( O(VE^2) in time)&lt;/li&gt;

&lt;li&gt;Minimum Cut Maximum method&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;shortest_path_problem&quot;&gt;Shortest Path problem.&lt;/h4&gt;

&lt;p&gt;This is all the algorithm and method that can find the shortest path in a graph with different complexity in space and time.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Floyd-Warshll (O(V^3) in time, compute the distance of all the postible pairs of path, can reconstruct the path after modifying the algorithm)&lt;/li&gt;

&lt;li&gt;Dijkstra ( Greedy Algo, time complexity is depended on the data structure which stores the the vertex such as binary heap, skiplist, MST, Fabonacci heap or array, BST etc.)&lt;/li&gt;

&lt;li&gt;Breadth First Search ( O(V+E) in tiem, undirect graph)&lt;/li&gt;

&lt;li&gt;Bellman-Ford ( O(VE) in time specified for negtive-weight or negtive circles )&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;other_graph_theory_problem&quot;&gt;Other graph theory problem&lt;/h4&gt;

&lt;p&gt;These problem can be solved by building up a Integer Linear Proggraming model, set up a goal function, and assume all the variables which obey the capacity constraint and flow conservation. At last minimize goal function.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Minimum edage cover &lt;strong&gt;&lt;em&gt;(use ILP)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;Minimum vertex cover &lt;strong&gt;&lt;em&gt;(use ILP Approximation method)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;LP formulation Assume that every vertex has an associated cost of c(v)&amp;gt;= 0. The (weighted) minimum vertex cover problem can be formulated as the following integer linear program (ILP).&lt;/p&gt;

&lt;p&gt;This ILP belongs to the more general class of ILPs for covering problems. The integrality gap of this ILP is 2, so its relaxation gives a factor-2 approximation algorithm for the minimum vertex cover problem. Furthermore, the linear programming relaxation of that ILP is half-integral, that is, there exists an optimal solution for which each entry x_v is either 0, 1/2, or 1.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Debug The File System</title>
   <link href="http://Octavianus.github.io/technology/2013/12/25/Debug-the-file-system"/>
   <updated>2013-12-25T00:00:00-08:00</updated>
   <id>http://Octavianus.github.io/technology/2013/12/25/Debug-the-file-system</id>
   <content type="html">&lt;h4 id=&quot;bug&quot;&gt;调试一个文件系统会面临诸多的问题，如果方式不对，即使通宵一整夜也无法找到问题所在，相信我，我们需要竟可能的缩小出现bug的可能情况。&lt;/h4&gt;

&lt;p&gt;所以程序员需要有合适的工具帮助他们快速定位错误。 譬如从一个文件系统的上层设计的角度，你需要跟踪一个变量从上层传递到下一层有哪些操作改变了他们的值，这个时候&lt;code&gt;gdb&lt;/code&gt;就能满足要求，设置判断条件，逐层设置断点观察变量。 再从另外一个角度，一个文件系统的底层设计涉及到大量的内存操作，拷贝一段内容到内存，从一个指针指向的内存地址读出指定长度的数据等等.经常会出现segment fault然后core dump. 造成段错误的原因有很多，对于一个文件系统来说以下问题更为常见：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;内存访问越界：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(a) 在搜索字符串时，依靠字符串结束符来判断字符串是否结束，但是字符串没有正常的使用结束符。&lt;/li&gt;

&lt;li&gt;(b) 最常见的要数使用strcpy, strcat, sprintf, strcmp, strcasecmp等字符串操作函数，将目标字符串读/写爆。应该使用strncpy, strlcpy, strncat, strlcat, snprintf, strncmp, strncasecmp等函数防止读写越界。 可是很多人偷懒，疲于仔细计算每一个分配的空间需要的字节数，或者计算错误导致越界&lt;/li&gt;

&lt;li&gt;(c) 另外要说明的是memcpy更是一个重灾区,详细内容会在后面说。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;非法指针：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(a) 使用空指针&lt;/li&gt;

&lt;li&gt;(b) 随意使用指针转换。一个指向一段内存的指针，除非确定这段内存原先就分配为某种结构或类型，或者这种结构或类型的数组，否则不要将它转换为这种结构或类型 的指针，而应该将这段内存拷贝到一个这种结构或类型中，再访问这个结构或类型。这是因为如果这段内存的开始地址不是按照这种结构或类型对齐的，那么访问它 时就很容易因为bus error而core dump.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;堆栈溢出：不要使用大的局部变量（因为局部变量都分配在栈上），这样容易造成堆栈溢出，破坏系统的栈和堆结构，导致出现莫名其妙的错误。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个时候，生成内存内核转储文件，把程序工作的当前状态存储成一个文件结合gdb调试。&lt;a href=&quot;http://blog.csdn.net/hust_wusen/article/details/8776116&quot;&gt;代码调试–先内核转储文件再gdb调试&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;另外一个强大的调试工具Valgrind也可以解决这类问题，我极力推荐，valgrind可以检查内存使用是否存在非法内存访问，和内存泄漏。 调试的过程如下&lt;/p&gt;

&lt;pre class=&quot;c&quot;&gt;&lt;code class=&quot;c&quot;&gt;
     David:  ==9166== Invalid read of size 4
    ==9166==    at 0x804A5AC: LFS_Open (LFS.c:155)
    ==9166==    by 0x804A6E6: LFS_Mkdir (LFS.c:183)
    ==9166==    by 0x405266B: fuse_mkdir (fuse.c:1223)
    ==9166==    by 0xFFFFFFFD: ???
    ==9166==  Address 0x430799c is not stack'd, malloc'd or (recently) free'd
     Sent at 7:14 PM on Tuesday
     David:  ==9265== Invalid write of size 4
    ==9265==    at 0x8048DE8: Dir_Open_File (dir.c:106)
    ==9265==    by 0x804A5BA: LFS_Open (LFS.c:156)
    ==9265==    by 0x804A6C8: LFS_Mkdir (LFS.c:183)
    ==9265==    by 0x405266B: fuse_mkdir (fuse.c:1223)
    ==9265==    by 0xFFFFFFFD: ???
    ==9265== Address 0x4307998 is 12 bytes after a block of size 4 alloc'd
    ==9265==    at 0x402BE68: malloc (in /usr/lib/valgrind/vgpreload_memcheck-x86-linux.so)
    // open a directory or file
    int Dir_Open_File(const char *path, struct fuse_file_info *fi)
    {
           Inode *myNode;
           int status;
    
           status = Get_Inode(path, &amp;amp;myNode);
           if(status) {printf(&amp;quot;openning file fail\n&amp;quot;); return status;}
    
           printf(&amp;quot;---------------------------ino: %d \n&amp;quot;, myNode&amp;gt;ino);
           fi-&amp;gt;fh = myNode-&amp;gt;ino;
    
           return status;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到再没出现问题的时候会有这样的提示&lt;code&gt;==9166== Invalid read of size 4&lt;/code&gt;and&lt;code&gt;==9265== Invalid write of size 4&lt;/code&gt;这个4个单位的读和写可以一直追踪到造成越界读或者写操作涉及的函数。 或者更多的是某个地址空间出现的问&lt;code&gt;Address 0x4307998 is 12 bytes after a block of size 4 alloc'd&lt;/code&gt;，我们都可以根据这些提示信息定位问题并且修复，就上面一个问题而言，段错误出现在fuse中，然而fuse是久经考验的客户态文件系统开发库，不会有问题，用gdb发现之所以是fuse内部报段错误，是因为他内部的一个结构指针莫名其妙的变为0了，访问的时候就成segment fault了。 我继续跟踪了下，最后发现了源头在log.c:1320文件中的writeToLog函数中的memcpy函数，然后我用valgrind检查了下内存访问情况，发现在这个地方的确存在非法内存写，也就是说在这个memcpy中覆盖了堆中的其他内存区域，造成了fuse内部那个结构指针变为0，报段错误我跟踪的时候发现每次创建文件的时候调用三次WriteToLog函数，第二次创建就会失败，我发现在创建第二个文件时，第二次还是第三次调用WriteToLog文件时会有内存覆盖，所以在这个创建操作返回到fuse框架内部后，就会有段错误 之后我们好好想想这个拷贝函数的内存地址你计算对了没之后，查到问题的确出在memcpy这个函数， copy大小和分配的大小要一致，否则就会越界访问。 之前存一个自定义的数据结构segment,一个指针类型的变量tseg的时候，比如那个结构中存有指向其他地址的指针，即使想计算sizeof(tseg). 但是指针存的内容无法计算出来，只有通过这种方法计算出来才能分配到真确的空间:&lt;/p&gt;

&lt;pre class=&quot;c&quot;&gt;&lt;code class=&quot;c&quot;&gt;
memcpy(buffer + offset, cache_walker-&amp;gt;seg
        + log_addr-&amp;gt;bk_no * bk_size * FLASH_SECTOR_SIZE,
        bks_remain * bk_size * FLASH_SECTOR_SIZE);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;先声明成void 指针的类型然后用的时候再cast成想要的结构类型 最后就是一个一个的解决 invaliad write of x bytes的问题一个一个算对，就没有bug了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Valgrind可以给你带来希望！因为当出现段错误时，使用Valgrind运行程序就不一定会出错，因为Valgrind有着不同的内存分配机制，也许在之前环境下出现了段错误，在valgrind下就可以正常运行了，不过内存覆盖或者读越界的问题仍然存在，只是越界的区域内的内容不是关键内容，所以程序仍然可以正常运行。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;&quot;&gt;排除了程序运行的问题以后，给大家介绍另外一个工具&lt;a href=&quot;http://valgrind.org/info/tools.html#callgrind&quot;&gt;&lt;code&gt;callgrind&lt;/code&gt;&lt;/a&gt;,它可以分析程序每个函数所使用的时间，分析系统瓶颈很方便.&lt;/h4&gt;</content>
 </entry>
 
 <entry>
   <title>Connect Lg Hbs 730 To Laptop</title>
   <link href="http://Octavianus.github.io/technology/2013/12/24/Connect-LG-HBS-730-to-Laptop"/>
   <updated>2013-12-24T00:00:00-08:00</updated>
   <id>http://Octavianus.github.io/technology/2013/12/24/Connect-LG-HBS-730-to-Laptop</id>
   <content type="html">&lt;p&gt;To setup a bluetooth headset such as &lt;strong&gt;LG HBS 730&lt;/strong&gt; to a windows 7 laptop, you just need to follow the steps below :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1.The first thing to do is to open your laptop bluetooth.&lt;/li&gt;

&lt;li&gt;2.On dell laptop you need to press FN + F2 and it will prompt and on and off option for bluetooth.&lt;/li&gt;

&lt;li&gt;3.Then Go to Start Menu - &amp;gt; Devices and Printers.&lt;/li&gt;

&lt;li&gt;4.On the upper left part of the screen you will see &lt;code&gt;add a device&lt;/code&gt; Click on it.&lt;/li&gt;

&lt;li&gt;5.It will search for a device.&lt;/li&gt;

&lt;li&gt;6.Get your bluetooth headset.&lt;/li&gt;

&lt;li&gt;7.Turn on the bluetooth and wait for the light to turn blue.&lt;/li&gt;

&lt;li&gt;8.Your laptop will detect the bluetooth headset.&lt;/li&gt;

&lt;li&gt;9.On your laptop select the bluetooth headset and click next.&lt;/li&gt;

&lt;li&gt;10.Then finish the setup.&lt;/li&gt;

&lt;li&gt;&lt;code&gt;11&lt;/code&gt;.The next thing to do is to go on your computer control panel - &amp;gt; then go to sound - &amp;gt; go to playback - &amp;gt; And select your bluetooth headset - &amp;gt; then set it &lt;code&gt;as default&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;step 11 is the critical step that most of us have forgotten for connection. If it is already set as default or if it is already working then skip the last step. After that, our device should hear the sound from our laptop now, if you have a microphone on your headset, it also should work if you follow all the steps.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>为何投身独立博客</title>
   <link href="http://Octavianus.github.io/thought/2013/12/22/%E4%B8%BA%E4%BD%95%E6%8A%95%E8%BA%AB%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2"/>
   <updated>2013-12-22T00:00:00-08:00</updated>
   <id>http://Octavianus.github.io/thought/2013/12/22/为何投身独立博客</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;有人说过，博客已死。&lt;/strong&gt;这个人的网名叫木遥，是一个多产的个人博主，但是我想木遥指的应该是公共博客，因为私人的博客永远不用担心运营商把他们的博客改造成什么难看的样子，增加什么难用的特性，更不用担心有朝一日他们会像MSN一样被收购，甚至被被迫关闭。另外一点，也是最重要的，每个人都有写作的欲望。私人博客具备更发散的功能，且不从商业价值考虑，就记录自己的故事和想法来说，博客也永远不会消失。&lt;/p&gt;

&lt;p&gt;曾经有些日子，我把木遥的博客当饭吃。觉得此人在文笔和思想方面和我相似，但是比我有更加深入和成熟的一套写作机制。我承认十分敬佩此人，他和我在美国工作学习多年的表哥有相仿的年纪，相似的背景，可是我对我表哥的了解，除了他对我的关心和照顾以外，看不到他这么多年经历过的荣辱起伏。但是表哥对我承认过刚到美国来的捉襟见肘，在木要的博客里，看到他当初也如此，似乎距离感小了很多。话说回来，我之所以佩服他，是因为我觉得木遥已经具备了靠博客养活自己的能力了：他写的科技类文章拨乱反正有理有据，叙述类小说逻辑清晰用词考究，社会热点话题也表现出观点独到又不失面面俱到的本领。&lt;/p&gt;

&lt;p&gt;他喜欢将生活中的突发奇想用在写作里，就好比他的小说留学记中说：“现在女生都喜欢刺激，你光对她好没用，你得带着她去干她没干过的事情。她一激动一紧张，就觉得对你有感觉了。” 当时我有一种一拍即合的认同感。再来，他更善于总结并且表达出来，这是最可贵的一点，具体的可以参见他的博客，&lt;a href=&quot;http://blog.farmostwood.net/&quot;&gt;木遥的窗子&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;我一直都珍惜别人的认真写作，说的俗一点，写作是思维的结晶，要把所想变成文章，需要大量的原创设计，一份调查表示: 写作对任何人同样的困难，无论学历，年纪和行业。好的写作可以让别人见文如见其人，很快的喜欢上你，也可以让自己变得透明，让读者了解最真实的自己。所以我产生了这样的想法，看牛人的博客如果从学习新知的角度，最好看TA最新的文章，如果想按图索骥摸索方法，最好看TA和你同年龄段时写的文章。所以我不会再看过木遥的博客之后妄自菲薄了，做好应该做的，想好将要做的，循环下去就足够了。&lt;/p&gt;

&lt;p&gt;在这样的想法催生下，farmosteast的博客就此诞生了。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;博客的设计方案&lt;/strong&gt;，主要来自于几个我在比较熟知的博主：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;年糕 : &lt;a href=&quot;http://yanran.li/&quot;&gt;Yanran’s Attic&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;阳志平 : &lt;a href=&quot;http://www.yangzhiping.com/&quot;&gt;阳志平的个人网站&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;木遥 : &lt;a href=&quot;http://blog.farmostwood.net/&quot;&gt;木遥的窗子&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;他们写作的目的仅仅是为了知识的总结和传播，如果想更好的利用博客实现盈利，应该看看这篇文章。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.36kr.com/p/207786.html&quot;&gt;不懂代码？创业照样进行&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这篇文章主要介绍的是我们熟知的Wordpress,由于有独立的数据库存储博客数据，在拥有大量的博客数据的情况下，Wordpress有更好的性能，更短的网页构建时间，当然也更稳定。所以大中型商用网站会更倾向于选择Wordpress；同时，Wordpress具有大量的免费和收费插件,例如博客流量分析和访客点击分析等助于博客定位和推广的工具。我采用的ruby开源博客框架jekyll是没有独立数据库的，所有数据存储在github上，每次访问都会生成静态代码，并且由github提供博客的的访问服务。我想自己不会因为写了太多的文章以至于让博客崩溃掉吧，maybe one day&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>How To</title>
   <link href="http://Octavianus.github.io/technology/2013/12/21/How-To"/>
   <updated>2013-12-21T00:00:00-08:00</updated>
   <id>http://Octavianus.github.io/technology/2013/12/21/How-To</id>
   <content type="html">&lt;p&gt;This Jekyll introduction will outline specifically what Jekyll is and why you would want to use it. Directly following the intro we’ll learn exactly &lt;em&gt;how&lt;/em&gt; Jekyll does what it does.&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;h3 id=&quot;what_is_jekyll&quot;&gt;What is Jekyll?&lt;/h3&gt;

&lt;p&gt;Jekyll is a parsing engine bundled as a ruby gem used to build static websites from dynamic components such as templates, partials, liquid code, markdown, etc. Jekyll is known as “a simple, blog aware, static site generator”.&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;p&gt;This website is created with Jekyll. &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Sites&quot;&gt;Other Jekyll websites&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;what_does_jekyll_do&quot;&gt;What does Jekyll Do?&lt;/h3&gt;

&lt;p&gt;Jekyll is a ruby gem you install on your local system. Once there you can call &lt;code&gt;jekyll --server&lt;/code&gt; on a directory and provided that directory is setup in a way jekyll expects, it will do magic stuff like parse markdown/textile files, compute categories, tags, permalinks, and construct your pages from layout templates and partials.&lt;/p&gt;

&lt;p&gt;Once parsed, Jekyll stores the result in a self-contained static &lt;code&gt;_site&lt;/code&gt; folder. The intention here is that you can serve all contents in this folder statically from a plain static web-server.&lt;/p&gt;

&lt;p&gt;You can think of Jekyll as a normalish dynamic blog but rather than parsing content, templates, and tags on each request, Jekyll does this once &lt;em&gt;beforehand&lt;/em&gt; and caches the &lt;em&gt;entire website&lt;/em&gt; in a folder for serving statically.&lt;/p&gt;

&lt;h3 id=&quot;jekyll_is_not_blogging_software&quot;&gt;Jekyll is Not Blogging Software&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Jekyll is a parsing engine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jekyll does not come with any content nor does it have any templates or design elements. This is a common source of confusion when getting started. Jekyll does not come with anything you actually use or see on your website - you have to make it.&lt;/p&gt;

&lt;h3 id=&quot;why_should_i_care&quot;&gt;Why Should I Care?&lt;/h3&gt;

&lt;p&gt;Jekyll is very minimalistic and very efficient. The most important thing to realize about Jekyll is that it creates a static representation of your website requiring only a static web-server. Traditional dynamic blogs like Wordpress require a database and server-side code. Heavily trafficked dynamic blogs must employ a caching layer that ultimately performs the same job Jekyll sets out to do; serve static content.&lt;/p&gt;

&lt;p&gt;Therefore if you like to keep things simple and you prefer the command-line over an admin panel UI then give Jekyll a try.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developers like Jekyll because we can write content like we write code:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ability to write content in markdown or textile in your favorite text-editor.&lt;/li&gt;

&lt;li&gt;Ability to write and preview your content via localhost.&lt;/li&gt;

&lt;li&gt;No internet connection required.&lt;/li&gt;

&lt;li&gt;Ability to publish via git.&lt;/li&gt;

&lt;li&gt;Ability to host your blog on a static web-server.&lt;/li&gt;

&lt;li&gt;Ability to host freely on GitHub Pages.&lt;/li&gt;

&lt;li&gt;No database required.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;how_jekyll_works&quot;&gt;How Jekyll Works&lt;/h1&gt;

&lt;p&gt;The following is a complete but concise outline of exactly how Jekyll works.&lt;/p&gt;

&lt;p&gt;Be aware that core concepts are introduced in rapid succession without code examples. This information is not intended to specifically teach you how to do anything, rather it is intended to give you the &lt;em&gt;full picture&lt;/em&gt; relative to what is going on in Jekyll-world.&lt;/p&gt;

&lt;p&gt;Learning these core concepts should help you avoid common frustrations and ultimately help you better understand the code examples contained throughout Jekyll-Bootstrap.&lt;/p&gt;

&lt;h2 id=&quot;initial_setup&quot;&gt;Initial Setup&lt;/h2&gt;

&lt;p&gt;After &lt;a href=&quot;/index.html#start-now&quot;&gt;installing jekyll&lt;/a&gt; you’ll need to format your website directory in a way jekyll expects. Jekyll-bootstrap conveniently provides the base directory format.&lt;/p&gt;

&lt;h3 id=&quot;the_jekyll_application_base_format&quot;&gt;The Jekyll Application Base Format&lt;/h3&gt;

&lt;p&gt;Jekyll expects your website directory to be laid out like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- _config.yml
|-- _includes
|-- _layouts
|   |-- default.html
|   |-- post.html
|-- _posts
|   |-- 2011-10-25-open-source-is-good.markdown
|   |-- 2011-04-26-hello-world.markdown
|-- _site
|-- index.html
|-- assets
    |-- css
        |-- style.css
    |-- javascripts&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt; Stores configuration data.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_includes&lt;/strong&gt; This folder is for partial views.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_layouts&lt;/strong&gt; This folder is for the main templates your content will be inserted into. You can have different layouts for different pages or page sections.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_posts&lt;/strong&gt; This folder contains your dynamic content/posts. the naming format is required to be &lt;code&gt;@YEAR-MONTH-DATE-title.MARKUP@&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_site&lt;/strong&gt; This is where the generated site will be placed once Jekyll is done transforming it.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;assets&lt;/strong&gt; This folder is not part of the standard jekyll structure. The assets folder represents &lt;em&gt;any generic&lt;/em&gt; folder you happen to create in your root directory. Directories and files not properly formatted for jekyll will be left untouched for you to serve normally.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(read more: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Usage&quot;&gt;https://github.com/mojombo/jekyll/wiki/Usage&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;jekyll_configuration&quot;&gt;Jekyll Configuration&lt;/h3&gt;

&lt;p&gt;Jekyll supports various configuration options that are fully outlined here: (&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Configuration&quot;&gt;https://github.com/mojombo/jekyll/wiki/Configuration&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;content_in_jekyll&quot;&gt;Content in Jekyll&lt;/h2&gt;

&lt;p&gt;Content in Jekyll is either a post or a page. These content “objects” get inserted into one or more templates to build the final output for its respective static-page.&lt;/p&gt;

&lt;h3 id=&quot;posts_and_pages&quot;&gt;Posts and Pages&lt;/h3&gt;

&lt;p&gt;Both posts and pages should be written in markdown, textile, or HTML and may also contain Liquid templating syntax. Both posts and pages can have meta-data assigned on a per-page basis such as title, url path, as well as arbitrary custom meta-data.&lt;/p&gt;

&lt;h3 id=&quot;working_with_posts&quot;&gt;Working With Posts&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Post&lt;/strong&gt; Posts are created by properly formatting a file and placing it the &lt;code&gt;_posts&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt; A post must have a valid filename in the form &lt;code&gt;YEAR-MONTH-DATE-title.MARKUP&lt;/code&gt; and be placed in the &lt;code&gt;_posts&lt;/code&gt; directory. If the data format is invalid Jekyll will not recognize the file as a post. The date and title are automatically parsed from the filename of the post file. Additionally, each file must have &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt; prepended to its content. YAML Front-Matter is a valid YAML syntax specifying meta-data for the given file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Order&lt;/strong&gt; Ordering is an important part of Jekyll but it is hard to specify a custom ordering strategy. Only reverse chronological and chronological ordering is supported in Jekyll.&lt;/p&gt;

&lt;p&gt;Since the date is hard-coded into the filename format, to change the order, you must change the dates in the filenames.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt; Posts can have tags associated with them as part of their meta-data. Tags may be placed on posts by providing them in the post’s YAML front matter. You have access to the post-specific tags in the templates. These tags also get added to the sitewide collection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories&lt;/strong&gt; Posts may be categorized by providing one or more categories in the YAML front matter. Categories offer more significance over tags in that they can be reflected in the URL path to the given post. Note categories in Jekyll work in a specific way. If you define more than one category you are defining a category hierarchy “set”. Example:&lt;/p&gt;
&lt;hr /&gt;
&lt;pre&gt;&lt;code&gt;title :  Hello World
categories : [lessons, beginner]&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;This defines the category hierarchy “lessons/beginner”. Note this is &lt;em&gt;one category&lt;/em&gt; node in Jekyll. You won’t find “lessons” and “beginner” as two separate categories unless you define them elsewhere as singular categories.&lt;/p&gt;

&lt;h3 id=&quot;working_with_pages&quot;&gt;Working With Pages&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Page&lt;/strong&gt; Pages are created by properly formatting a file and placing it anywhere in the root directory or subdirectories that do &lt;em&gt;not&lt;/em&gt; start with an underscore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt; In order to register as a Jekyll page the file must contain &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt;. Registering a page means 1) that Jekyll will process the page and 2) that the page object will be available in the &lt;code&gt;site.pages&lt;/code&gt; array for inclusion into your templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories and Tags&lt;/strong&gt; Pages do not compute categories nor tags so defining them will have no effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sub-Directories&lt;/strong&gt; If pages are defined in sub-directories, the path to the page will be reflected in the url. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- people
    |-- bob
        |-- essay.html&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This page will be available at &lt;code&gt;http://yourdomain.com/people/bob/essay.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommended Pages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index.html&lt;/strong&gt; You will always want to define the root index.html page as this will display on your root URL.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;404.html&lt;/strong&gt; Create a root 404.html page and GitHub Pages will serve it as your 404 response.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;sitemap.html&lt;/strong&gt; Generating a sitemap is good practice for SEO.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;about.html&lt;/strong&gt; A nice about page is easy to do and gives the human perspective to your website.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;templates_in_jekyll&quot;&gt;Templates in Jekyll&lt;/h2&gt;

&lt;p&gt;Templates are used to contain a page’s or post’s content. All templates have access to a global site object variable: &lt;code&gt;site&lt;/code&gt; as well as a page object variable: &lt;code&gt;page&lt;/code&gt;. The site variable holds all accessible content and metadata relative to the site. The page variable holds accessible data for the given page or post being rendered at that point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a Template&lt;/strong&gt; Templates are created by properly formatting a file and placing it in the &lt;code&gt;_layouts&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt; Templates should be coded in HTML and contain YAML Front Matter. All templates can contain Liquid code to work with your site’s data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rending Page/Post Content in a Template&lt;/strong&gt; There is a special variable in all templates named : &lt;code&gt;content&lt;/code&gt;. The &lt;code&gt;content&lt;/code&gt; variable holds the page/post content including any sub-template content previously defined. Render the content variable wherever you want your main content to be injected into your template:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
&amp;lt;body&amp;gt;
  &amp;lt;div id=&quot;sidebar&quot;&amp;gt; ... &amp;lt;/div&amp;gt;
  &amp;lt;div id=&quot;main&quot;&amp;gt;
    &amp;#123;{content}&amp;#125;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;subtemplates&quot;&gt;Sub-Templates&lt;/h3&gt;

&lt;p&gt;Sub-templates are exactly templates with the only difference being they define another “root” layout/template within their YAML Front Matter. This essentially means a template will render inside of another template.&lt;/p&gt;

&lt;h3 id=&quot;includes&quot;&gt;Includes&lt;/h3&gt;

&lt;p&gt;In Jekyll you can define include files by placing them in the &lt;code&gt;_includes&lt;/code&gt; folder. Includes are NOT templates, rather they are just code snippets that get included into templates. In this way, you can treat the code inside includes as if it was native to the parent template.&lt;/p&gt;

&lt;p&gt;Any valid template code may be used in includes.&lt;/p&gt;

&lt;h2 id=&quot;using_liquid_for_templating&quot;&gt;Using Liquid for Templating&lt;/h2&gt;

&lt;p&gt;Templating is perhaps the most confusing and frustrating part of Jekyll. This is mainly due to the fact that Jekyll templates must use the Liquid Templating Language.&lt;/p&gt;

&lt;h3 id=&quot;what_is_liquid&quot;&gt;What is Liquid?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/liquid&quot;&gt;Liquid&lt;/a&gt; is a secure templating language developed by &lt;a href=&quot;http://shopify.com&quot;&gt;Shopify&lt;/a&gt;. Liquid is designed for end-users to be able to execute logic within template files without imposing any security risk on the hosting server.&lt;/p&gt;

&lt;p&gt;Jekyll uses Liquid to generate the post content within the final page layout structure and as the primary interface for working with your site and post/page data.&lt;/p&gt;

&lt;h3 id=&quot;why_do_we_have_to_use_liquid&quot;&gt;Why Do We Have to Use Liquid?&lt;/h3&gt;

&lt;p&gt;GitHub uses Jekyll to power &lt;a href=&quot;http://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;. GitHub cannot afford to run arbitrary code on their servers so they lock developers down via Liquid.&lt;/p&gt;

&lt;h3 id=&quot;liquid_is_not_programmerfriendly&quot;&gt;Liquid is Not Programmer-Friendly.&lt;/h3&gt;

&lt;p&gt;The short story is liquid is not real code and its not intended to execute real code. The point being you can’t do jackshit in liquid that hasn’t been allowed explicitly by the implementation. What’s more you can only access data-structures that have been explicitly passed to the template.&lt;/p&gt;

&lt;p&gt;In Jekyll’s case it is not possible to alter what is passed to Liquid without hacking the gem or running custom plugins. Both of which cannot be supported by GitHub Pages.&lt;/p&gt;

&lt;p&gt;As a programmer - this is very frustrating.&lt;/p&gt;

&lt;p&gt;But rather than look a gift horse in the mouth we are going to suck it up and view it as an opportunity to work around limitations and adopt client-side solutions when possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside&lt;/strong&gt; My personal stance is to not invest time trying to hack liquid. It’s really unnecessary &lt;em&gt;from a programmer’s&lt;/em&gt; perspective. That is to say if you have the ability to run custom plugins (i.e. run arbitrary ruby code) you are better off sticking with ruby. Toward that end I’ve built &lt;a href=&quot;http://github.com/plusjade/mustache-with-jekyll&quot;&gt;Mustache-with-Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;static_assets&quot;&gt;Static Assets&lt;/h2&gt;

&lt;p&gt;Static assets are any file in the root or non-underscored subfolders that are not pages. That is they have no valid YAML Front Matter and are thus not treated as Jekyll Pages.&lt;/p&gt;

&lt;p&gt;Static assets should be used for images, css, and javascript files.&lt;/p&gt;

&lt;h2 id=&quot;how_jekyll_parses_files&quot;&gt;How Jekyll Parses Files&lt;/h2&gt;

&lt;p&gt;Remember Jekyll is a processing engine. There are two main types of parsing in Jekyll.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Content parsing.&lt;/strong&gt; This is done with textile or markdown.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Template parsing.&lt;/strong&gt; This is done with the liquid templating language.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And thus there are two main types of file formats needed for this parsing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Post and Page files.&lt;/strong&gt; All content in Jekyll is either a post or a page so valid posts and pages are parsed with markdown or textile.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Template files.&lt;/strong&gt; These files go in &lt;code&gt;_layouts&lt;/code&gt; folder and contain your blogs &lt;strong&gt;templates&lt;/strong&gt;. They should be made in HTML with the help of Liquid syntax. Since include files are simply injected into templates they are essentially parsed as if they were native to the template.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Arbitrary files and folders.&lt;/strong&gt; Files that &lt;em&gt;are not&lt;/em&gt; valid pages are treated as static content and pass through Jekyll untouched and reside on your blog in the exact structure and format they originally existed in.&lt;/p&gt;

&lt;h3 id=&quot;formatting_files_for_parsing&quot;&gt;Formatting Files for Parsing.&lt;/h3&gt;

&lt;p&gt;We’ve outlined the need for valid formatting using &lt;strong&gt;YAML Front Matter&lt;/strong&gt;. Templates, posts, and pages all need to provide valid YAML Front Matter even if the Matter is empty. This is the only way Jekyll knows you want the file processed.&lt;/p&gt;

&lt;p&gt;YAML Front Matter must be prepended to the top of template/post/page files:&lt;/p&gt;
&lt;hr /&gt;
&lt;pre&gt;&lt;code&gt;layout: post
category : pages
tags : [how-to, jekyll]&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;pre&gt;&lt;code&gt;... contents ...&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Three hyphens on a new line start the Front-Matter block and three hyphens on a new line end the block. The data inside the block must be valid YAML.&lt;/p&gt;

&lt;p&gt;Configuration parameters for YAML Front-Matter is outlined here: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;A comprehensive explanation of YAML Front Matter&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;defining_layouts_for_posts_and_templates_parsing&quot;&gt;Defining Layouts for Posts and Templates Parsing.&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;layout&lt;/code&gt; parameter in the YAML Front Matter defines the template file for which the given post or template should be injected into. If a template file specifies its own layout, it is effectively being used as a &lt;code&gt;sub-template.&lt;/code&gt; That is to say loading a post file into a template file that refers to another template file with work in the way you’d expect; as a nested sub-template.&lt;/p&gt;

&lt;h2 id=&quot;how_jekyll_generates_the_final_static_files&quot;&gt;How Jekyll Generates the Final Static Files.&lt;/h2&gt;

&lt;p&gt;Ultimately, Jekyll’s job is to generate a static representation of your website. The following is an outline of how that’s done:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll collects data.&lt;/strong&gt; Jekyll scans the posts directory and collects all posts files as post objects. It then scans the layout assets and collects those and finally scans other directories in search of pages.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll computes data.&lt;/strong&gt; Jekyll takes these objects, computes metadata (permalinks, tags, categories, titles, dates) from them and constructs one big &lt;code&gt;site&lt;/code&gt; object that holds all the posts, pages, layouts, and respective metadata. At this stage your site is one big computed ruby object.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll liquifies posts and templates.&lt;/strong&gt; Next jekyll loops through each post file and converts (through markdown or textile) and &lt;strong&gt;liquifies&lt;/strong&gt; the post inside of its respective layout(s). Once the post is parsed and liquified inside the the proper layout structure, the layout itself is “liquified”. &lt;strong&gt;Liquification&lt;/strong&gt; is defined as follows: Jekyll initiates a Liquid template, and passes a simpler hash representation of the ruby site object as well as a simpler hash representation of the ruby post object. These simplified data structures are what you have access to in the templates.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll generates output.&lt;/strong&gt; Finally the liquid templates are “rendered”, thereby processing any liquid syntax provided in the templates and saving the final, static representation of the file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Notes.&lt;/strong&gt; Because Jekyll computes the entire site in one fell swoop, each template is given access to a global &lt;code&gt;site&lt;/code&gt; hash that contains useful data. It is this data that you’ll iterate through and format using the Liquid tags and filters in order to render it onto a given page.&lt;/p&gt;

&lt;p&gt;Remember, in Jekyll you are an end-user. Your API has only two components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The manner in which you setup your directory.&lt;/li&gt;

&lt;li&gt;The liquid syntax and variables passed into the liquid templates.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All the data objects available to you in the templates via Liquid are outlined in the &lt;strong&gt;API Section&lt;/strong&gt; of Jekyll-Bootstrap. You can also read the original documentation here: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Template-Data&quot;&gt;https://github.com/mojombo/jekyll/wiki/Template-Data&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this paints a clearer picture of what Jekyll is doing and why it works the way it does. As noted, our main programming constraint is the fact that our API is limited to what is accessible via Liquid and Liquid only.&lt;/p&gt;

&lt;p&gt;Jekyll-bootstrap is intended to provide helper methods and strategies aimed at making it more intuitive and easier to work with Jekyll =)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you&lt;/strong&gt; for reading this far.&lt;/p&gt;

&lt;h2 id=&quot;next_steps&quot;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Please take a look at &lt;a href=&quot;&quot;&gt;&lt;/a&gt; or jump right into &lt;a href=&quot;&quot;&gt;Usage&lt;/a&gt; if you’d like.&lt;/p&gt;</content>
 </entry>
 
 
</feed>